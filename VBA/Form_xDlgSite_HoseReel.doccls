Option Compare Database
Option Explicit
Private aSeedDate As Variant
Private aStationID As Long
Const ModuleName As String = "xDlgSite_HoseReel"
Const fldName As String = "[LifeCycleSeed]"

Private Sub cmdCancel_Click()
    mdlSite.ReturnValue = vbNull
    Me.Undo
    Me.Visible = False
End Sub

Private Sub cmdOK_Click()
    Dim msg As String
    
    On Error GoTo PROC_ERR
    
    If IsDate(Me.Controls(fldName)) Then
        mdlSite.ReturnValue = Me.Controls(fldName)
        Me.Visible = False
    Else
        mdlSite.ReturnValue = vbNull
        
        Me.Controls(fldName) = Null
        Me.Visible = False
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " cmdOK_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub cmdSetDate_Click()
    Dim v As Variant
    v = mdlDateTime.InputDate("Enter commission date", Me.Controls(fldName))
    If Nz(v, 0) > 0 Then
        Me.Controls(fldName) = v
        Me.Controls(fldName).Requery
    End If
End Sub

Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        cmdCancel_Click
        KeyCode = 0
    End If
End Sub

Private Sub Form_Load()
    Dim v As Variant
    Dim msg As String
    
    On Error GoTo PROC_ERR
    
    aStationID = 0
    v = DLookup("[CompanyCode]", "dbo_CompanyInfo", "[CompanyInfoID] = 1")
    If Not IsNull(v) Then
        Me.lblCompanyCode.Caption = CStr(v)
    Else
        Me.lblCompanyCode.Caption = "FES"
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " Form_Load" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
    Dim v As Variant
    Dim msg As String
    Dim d As Double
    Dim cCode As String
    Dim s As String


    On Error GoTo PROC_ERR
    
    If Len(Me.OpenArgs) > 0 Then
        aStationID = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
    End If
    If aStationID > 0 Then
        Me.Filter = "[StationID] = " & CStr(aStationID)
        If Me.FilterOn = False Then Me.FilterOn = True
        
        d = mdlLifeCycle.GetMajorIntervalStation(aStationID)
        If d > 0 Then
            s = mdlLifeCycle.PrettyIntervalStr(d)
            Label4.Caption = Replace(Label4.Caption, "#INTERVAL#", s)
        Else
            Label4.Caption = Replace(Label4.Caption, "#INTERVAL#", vbNullString)
        End If
        
    Else
        '
        msg = "An invalid StationID was passed in OpenArgs" & vbCrLf & _
              "The dialogue will exit."
        cCode = mdlCompany.GetCompanyCode
        MsgBox msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbCritical, cCode & " Error"
        
        ' forces the form to close
        Cancel = True
    End If

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " Form_Open" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

