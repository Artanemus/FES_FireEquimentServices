Option Compare Database
Option Explicit

Const ModuleName As String = "xTemplate_Dlg"
Private CompanyCodeStr As String


Private Sub cmdClearLog_Click()
    mdlLog.ClearLog
    Me.Refresh
End Sub

Private Sub cmdOK_Click()
Dim msg As String
    
    On Error GoTo PROC_ERR
    Me.Visible = False
    ' mdl#.ReturnValue = vbNull
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " cmdOK_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub



Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        cmdOK_Click
        KeyCode = 0
    End If
End Sub

Private Sub Form_Load()
Dim msg As String
    
    On Error GoTo PROC_ERR
    
    CompanyCodeStr = mdlCompany.GetCompanyCode
    Me.lblCompanyCode.Caption = CompanyCodeStr
    
    DynamicResize Me.Form
        
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " Form_Load" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
'Dim v As Variant
Dim msg As String

    On Error GoTo PROC_ERR
    
'    If Len(Me.OpenArgs) > 0 Then
'        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
'    End If

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " Form_Open" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub



Private Sub DynamicResize(aForm As Form)
    'Me. was replaced with aForm.
    ''If Not mPassed Then Exit Sub

    'Variables
    Dim lngCount As Long
    Dim lngWindowHeight As Long
    Dim lngOldWindowHeight As Long
    Dim lngDeltaTop As Long
    Dim lngMaxRecordsToShow As Long
    Dim lngMinRecordsToShow As Long

    lngMaxRecordsToShow = 10
    lngMinRecordsToShow = 6

    'Find the amount of records in form
    Dim rst As DAO.Recordset
    Set rst = aForm.RecordsetClone
    If Not rst.EOF Then rst.MoveLast
    lngCount = rst.RecordCount

    'Assert Minimum height
    If lngCount <= lngMinRecordsToShow Then lngCount = lngMinRecordsToShow

    'Check whether there are more then Max amount of records
    If lngCount > lngMaxRecordsToShow Then
        lngCount = lngMaxRecordsToShow
        'Enable vertical scrollbar
        aForm.ScrollBars = 2                     'Vertical
    Else
        'Disable scrollbars
        aForm.ScrollBars = 0                     'None
    End If

    'Calculate new windowheight.
    'If you do not have a header/footer, or they are not visible adjust accordingly
    lngWindowHeight = aForm.FormHeader.Height + _
                      aForm.Detail.Height * lngCount + _
                      aForm.FormFooter.Height    '+ _567
                      
    'The 567 is to account for title bar Height.
    'If you use thin border, adjust accordingly

    'The form will be "shortened" and we need to adjust the top property as well to keep it properly centered
    lngOldWindowHeight = aForm.WindowHeight
    lngDeltaTop = (lngOldWindowHeight - lngWindowHeight) / 2

    'Use the move function to move the form
    If lngDeltaTop < 1 Then
        lngDeltaTop = 1
    End If

    aForm.Move aForm.WindowLeft, aForm.WindowTop + lngDeltaTop, , lngWindowHeight

    'Cleanup
    rst.Close
    Set rst = Nothing


End Sub


