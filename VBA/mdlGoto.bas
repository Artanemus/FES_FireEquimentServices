Attribute VB_Name = "mdlGoto"
Option Compare Database
Option Explicit
Private mRunning As Boolean
Private mReturnValue As Variant
Private mOpenArgs As String

Const ModuleName As String = "mdlGoto"


' +-----------------------------------------------------------
' |
' |  properties for communicating with xDlgCustGotoID and xDlgHRGotoID
' |
Public Property Get Running() As Boolean
    Running = mRunning
End Property

Public Property Let ReturnValue(X As Variant)
    mReturnValue = X
End Property

Public Property Get ReturnValue() As Variant
    ReturnValue = mReturnValue
End Property
    
Public Function GotoCustCode(Optional ByVal aRtnValueOnly As Boolean = False) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    
    mReturnValue = mdlPicker.PickCustCode
    If (Nz(mReturnValue, 0) > 0) Then
        GotoCustCode = mReturnValue
        ' name of form, ID to lookup, ID fieldname
        OpenFormAndCue "_Customer", mReturnValue, "[CustomerID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "GotoCustCode" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function



'*****************************************************************************************
' UPDATED PARAMS
'*****************************************************************************************


Public Function GotoEquip(Optional ByVal aEquipmentID As Long = 0) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    mOpenArgs = ""
    If aEquipmentID = 0 Then
        ExeEquipGotoID
        If (Nz(mReturnValue, 0) = 0) Then
            Exit Function
        Else
            GotoEquip = mReturnValue
            ' name of form, ID to lookup, ID fieldname
            OpenFormAndCue "_Equipment", mReturnValue, "[EquipmentID]"
        End If
    Else
        GotoEquip = aEquipmentID
        OpenFormAndCue "_Equipment", aEquipmentID, "[EquipmentID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "GotoEquip" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function

Public Function GotoCust(Optional ByVal aCustomerID As Long = 0) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    mOpenArgs = ""
    If aCustomerID = 0 Then
        ExeCustGotoID
        If (Nz(mReturnValue, 0) = 0) Then
            Exit Function
        Else
            GotoCust = mReturnValue
            ' name of form, ID to lookup, ID fieldname
            OpenFormAndCue "_Customer", mReturnValue, "[CustomerID]"
        End If
    Else
        GotoCust = aCustomerID
        OpenFormAndCue "_Customer", aCustomerID, "[CustomerID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "GotoCust" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function

Public Function GotoHR(Optional ByVal aHRID As Long = 0) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    GotoHR = 0
    mOpenArgs = ""
    If aHRID = 0 Then
        ExeHRGotoID
        If (Nz(mReturnValue, 0) = 0) Then
            Exit Function
        Else
            GotoHR = mReturnValue
            ' name of form, ID to lookup, ID fieldname
            OpenFormAndCue "_HR", mReturnValue, "[HRID]"
        End If
    Else
        GotoHR = aHRID
        OpenFormAndCue "_HR", aHRID, "[HRID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " GotoHR" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function


Public Function GotoCustSite(Optional ByVal aCustSiteID As Long = 0) As Long
    Dim msg As String
    Dim aCustomerID As Long
    Dim v As Variant
    
    On Error GoTo PROC_ERR
    
    mOpenArgs = ""
    v = DLookup("[CustomerID]", "dbo_CustSite", "[CustSiteID] = " & CStr(aCustSiteID))
    If Nz(v, 0) > 0 Then
        GotoCustSite = CLng(v)
        OpenFormAndCue "_Customer", CLng(v), "[CustomerID]"
        If Screen.ActiveForm.Name = "_Customer" Then
            Forms("_Customer").Form!CustTabCtl.Value = 3
            Forms("_Customer").Form!SF_Cust_Site.Form.CueToRec aCustSiteID
        ' Screen.ActiveForm.Form!CustTabCtl.TabIndex = 3
        ' Screen.ActiveForm.Form!SF_Cust_Site.CueTo aCustSiteID
        End If
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "GotoCust" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function

Public Function GotoSite(Optional ByVal aSiteID As Long = 0) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    GotoSite = 0
    mOpenArgs = ""
    If aSiteID = 0 Then
        ExeSiteGotoID
        If (Nz(mReturnValue, 0) = 0) Then
            Exit Function
        Else
            GotoSite = mReturnValue
            ' name of form, ID to lookup, ID fieldname
            OpenFormAndCue "_Site", mReturnValue, "[SiteID]"
        End If
    Else
        GotoSite = aSiteID
        OpenFormAndCue "_Site", aSiteID, "[SiteID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " GotoSite" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function

Public Function GotoSurveyOrder(Optional ByVal aSurveyOrderID As Long = 0) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    GotoSurveyOrder = 0
    mOpenArgs = ""
    
    If aSurveyOrderID = 0 Then
        ExeSurveyOrderGotoID
        If (Nz(mReturnValue, 0) = 0) Then
            Exit Function
        Else
            GotoSurveyOrder = mReturnValue
            ' name of form, ID to lookup, ID fieldname
            OpenFormAndCue "_SurveyOrder", mReturnValue, "[SurveyOrderID]"
        End If
    Else
        GotoSurveyOrder = aSurveyOrderID
        OpenFormAndCue "_SurveyOrder", aSurveyOrderID, "[SurveyOrderID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " GotoSurveyOrder" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function

Public Function GotoInspectionOrder(Optional ByVal aInspectionOrderID As Long = 0) As Long
    Dim msg As String
    On Error GoTo PROC_ERR
    GotoInspectionOrder = 0
    mOpenArgs = ""
    
    If aInspectionOrderID = 0 Then
        ExeInspectionOrderGotoID
        If (Nz(mReturnValue, 0) = 0) Then
            Exit Function
        Else
            GotoInspectionOrder = mReturnValue
            ' name of form, ID to lookup, ID fieldname
            OpenFormAndCue "_InspectOrder", mReturnValue, "[InspectionOrderID]"
        End If
    Else
        GotoInspectionOrder = aInspectionOrderID
        OpenFormAndCue "_InspectOrder", aInspectionOrderID, "[InspectionOrderID]"
    End If
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " GotoInspectionOrder" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function



' +-----------------------------------------------------------
' |
' |
Private Sub ExeEquipGotoID()
    Dim msg As String
    On Error GoTo PROC_ERR
    mRunning = True
    DoCmd.OpenForm "xDlgGoto_EquipID", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgGoto_EquipID"
    mRunning = False
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ExeEquipGotoID" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

' +-----------------------------------------------------------
' |
' |
Private Sub ExeCustGotoID()
    Dim msg As String
    On Error GoTo PROC_ERR
    mRunning = True
    DoCmd.OpenForm "xDlgGoto_CustID", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgGoto_CustID"
    mRunning = False
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ExeCustGotoID" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

' +-----------------------------------------------------------
' |
' |
Private Sub ExeHRGotoID()
    Dim msg As String
    On Error GoTo PROC_ERR
    mRunning = True
    DoCmd.OpenForm "xDlgGoto_HRID", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgGoto_HRID"
    mRunning = False
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ExeHrGotoID" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub


' +-----------------------------------------------------------
' |
' |
Private Sub ExeSiteGotoID()
    Dim msg As String
    On Error GoTo PROC_ERR
    mRunning = True
    DoCmd.OpenForm "xDlgGoto_SiteID", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgGoto_SiteID"
    mRunning = False
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ExeSiteGotoID" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub


' +-----------------------------------------------------------
' |
' |
Private Sub ExeInspectionOrderGotoID()
    Dim msg As String
    On Error GoTo PROC_ERR
    mRunning = True
    DoCmd.OpenForm "xDlgGoto_InspectionOrderID", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgGoto_InspectionOrderID"
    mRunning = False
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ExeInspectionOrderGotoID" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub



' +-----------------------------------------------------------
' |
' |
Private Sub ExeSurveyOrderGotoID()
    Dim msg As String
    On Error GoTo PROC_ERR
    mRunning = True
    DoCmd.OpenForm "xDlgGoto_SurveyOrderID", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgGoto_SurveyOrderID"
    mRunning = False
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ExeSurveyOrderGotoID" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub



' +-----------------------------------------------------------
' name of form, ID to lookup, ID fieldname
' eg. OpenFormAndCue "_Customer", 213, "[CustomerID]"
' eg. OpenFormAndCue "_HR", 213, "[HRID"
Public Sub OpenFormAndCue(FormNameToUseStr As String, aID As Variant, aIDFieldName As String)
    Dim strCriteria As String
    Dim rst As DAO.Recordset
    If Not IsLoaded(FormNameToUseStr) Then
        DoCmd.OpenForm FormNameToUseStr, acNormal
    End If
    If Forms(FormNameToUseStr).FilterOn = True Then
        Forms(FormNameToUseStr).FilterOn = False
    End If
    Set rst = Forms(FormNameToUseStr).RecordsetClone
    strCriteria = aIDFieldName & " = " & CStr(aID)
    rst.FindFirst strCriteria
    If Not rst.NoMatch Then
        Forms(FormNameToUseStr).Bookmark = rst.Bookmark
        Forms(FormNameToUseStr).SetFocus
        Exit Sub
    Else
        MsgBox "NoMatch :: Unable to bookmark ID.", , "Error finding record..."
    End If
    Set rst = Nothing
End Sub

