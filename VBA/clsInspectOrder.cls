VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsInspectOrder"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

Dim aClassName As String

' Used by system log
Dim CallerID As Long
Dim aCompanyInfoID As Long
Dim aCode As String

'  -----------------------
' DataBase params
'  -----------------------
' dbo_CustSite
Dim fCustSiteID As Long
Dim fCustomerID As Long
Dim fSiteID As Long
Dim fSeedDate As Variant
Dim fSeedLevel As Variant
Dim fDoReseed As Boolean
Dim fIsEnabled As Boolean
' dbo_InspectionOrder
Dim fInspectionOrderID As Long
Dim fInspectionStatusID As Integer
Dim fLastRequestDT As Variant
Dim fLastLevelNum As Variant
' calculated
Dim fIsNewCustomer As Boolean
Dim fCalcNextRequestedDT As Date
Dim fCalcNextLevelNum As Integer

'  -----------------------
'Global params
'  -----------------------
Dim fServiceInterval As Double
Dim fNumOfLevels As Integer
Dim fDefStartLevel As Integer

' DataBase Fields used in class
' GET

Public Property Get IsNewCustomer() As Boolean
    IsNewCustomer = fIsNewCustomer
End Property

Public Property Get DoReseed() As Boolean
    DoReseed = fDoReseed
End Property

Public Property Get IsEnabled() As Boolean
    IsEnabled = fIsEnabled
End Property

Public Property Get ServiceInterval() As Integer
    ServiceInterval = fServiceInterval
End Property

Public Property Get InspectionOrderID() As Integer
    InspectionOrderID = fInspectionOrderID
End Property

Public Property Get CustSiteID() As Integer
    CustSiteID = fCustSiteID
End Property

Public Property Get SiteID() As Integer
    SiteID = fSiteID
End Property

Public Property Get SeedDate() As Date
    SeedDate = Empty
    If Nz(fSeedDate, 0) > 0 Then
        If IsDate(fSeedDate) Then
            SeedDate = CDate(fSeedDate)
        End If
    End If
End Property

Public Property Get SeedLevel() As Integer
    SeedLevel = CInt(Nz(fSeedLevel, 0))
End Property

Public Property Get CalcNextRequestedDT() As Date
    CalcNextRequestedDT = fCalcNextRequestedDT
End Property

Public Property Get NextLevelNum() As Integer
    NextLevelNum = fCalcNextLevelNum
End Property

Public Property Get InspectionStatusID() As Integer
    InspectionStatusID = fInspectionStatusID
End Property

' LET assign to variable
Public Property Let CustSiteID(ByVal RHS As Integer)
    fCustSiteID = RHS
End Property

' LET assign to variable
Public Property Let DoReseed(ByVal RHS As Boolean)
    fDoReseed = RHS
End Property


'' assign to object
'
'Private m_Prices As Collection
'
'' Get/Set Properties
'Property Get Prices() As Collection
'    Set Prices = m_Prices
'End Property
'
'Property Set Prices(newPrices As Collection)
'    Set m_Prices = newPrices
'End Property


Public Sub DisableCustSite()
    Dim strSQL As String
    Dim db As Database
    Dim rs As Recordset
    Dim msg As String
    
    On Error GoTo PROC_ERR
    If fCustSiteID > 0 Then
        strSQL = _
                "UPDATE dbo_CustSite SET dbo_CustSite.IsEnabled = False" & _
                " WHERE (((dbo_CustSite.CustSiteID)=" & CStr(fCustSiteID) & "));"
        Set db = CurrentDb
        db.Execute strSQL, dbFailOnError + dbSeeChanges
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = aClassName & " DisableCustSite" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT
        
End Sub


Public Sub ClearDoReseed()
    Dim strSQL As String
    Dim db As Database
    Dim rs As Recordset
    Dim msg As String
    
    On Error GoTo PROC_ERR
    If fCustSiteID > 0 Then
        strSQL = _
                "UPDATE dbo_CustSite SET dbo_CustSite.DoReseed = False" & _
                " WHERE (((dbo_CustSite.CustSiteID)=" & CStr(fCustSiteID) & "));"
        Set db = CurrentDb
        db.Execute strSQL, dbFailOnError + dbSeeChanges
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = aClassName & " ClearReseed" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT
        
End Sub

Private Sub ClearParams()
    fSeedDate = Empty
    fSeedLevel = 0
    fCalcNextRequestedDT = Empty
    fCalcNextLevelNum = 0
    fInspectionStatusID = 0
    fIsNewCustomer = False
    fInspectionOrderID = 0
    fInspectionStatusID = 0
    fCustSiteID = 0
    fCustomerID = 0
    fSiteID = 0
    fDoReseed = False
    fIsEnabled = False
End Sub

Private Sub Class_Initialize()
    Dim msg As String
    On Error GoTo PROC_ERR
    aClassName = "clsInspectOrder"
    ' Parameters to pass to LOG
    CallerID = 2
    aCompanyInfoID = mdlCompany.GetCompanyInfoID
    aCode = mdlCompany.GetCompanyCode
    fServiceInterval = mdlCompany.GetServiceInterval
    fNumOfLevels = mdlCompany.GetNumOfLevels
    fDefStartLevel = mdlCompany.GetDefStartLevel
    fIsNewCustomer = False
    fDoReseed = False
    fSeedLevel = fDefStartLevel
    ClearParams

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = aClassName & " Class_Initialize" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT
        
End Sub

Public Sub AssignParam(aCustSiteID As Long)
    Dim strSQL As String
    Dim db As Database
    Dim rs As Recordset
    Dim rs2 As Recordset
    Dim msg As String
    Dim v As Variant

    On Error GoTo PROC_ERR
    ' call once - prior to using class.
    
    ' pulls the most recent inspection order for the customer site
    strSQL = _
           "SELECT Top 1 InspectionOrderID, CustSiteID, CustomerID, SiteID, RequestedDT, LevelNum, InspectionStatusID " & _
           "FROM dbo_InspectionOrder " & _
           "WHERE (dbo_InspectionOrder.CustSiteID = " & CStr(aCustSiteID) & " ) " & _
           "ORDER BY dbo_InspectionOrder.RequestedDT DESC;"
    
    Set db = CurrentDb
    Set rs = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    
    ' customer site parameters
    strSQL = _
           "SELECT CustSiteID, CustomerID, SiteID, SeedDate, SeedLevel, DoReseed, IsEnabled FROM dbo_CustSite WHERE [CustSiteID] = " & CStr(aCustSiteID)
    Set rs2 = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    
    
    ' Global default
    fSeedLevel = fDefStartLevel
        
    If rs2.RecordCount > 0 Then
        
        ' safe - manatory parameters
        fCustSiteID = rs2![CustSiteID]
        fCustomerID = rs2![CustomerID]
        fSiteID = rs2![SiteID]
        fIsEnabled = rs2![IsEnabled]
        
        ' does the customer have a inspection orders.
        If rs.RecordCount = 0 Then
            ' NO INSPECTION RECORDS FOUND - NEW CUSTOMER
            fIsNewCustomer = True
            ' New customers must always re-seed.
            ' fDoReseed = True
            ' GET SeedDate FROM CustSiteID
            fSeedDate = rs2![SeedDate]
            ' GET SeedLevel FROM CustSiteID
            fSeedLevel = rs2![SeedLevel]
        Else
            ' Assign fields order number and status
            fInspectionOrderID = Nz(rs![InspectionOrderID], 0)
            ' validate inspection status else use default
            fInspectionStatusID = CInt(Nz(rs![InspectionStatusID], 0))
            ' Read DoReseed State
            ' The user may have asked on last customer site 'enable' to do a re-seed for the next new inspection order.
            ' This will be reset to false after a reseeded inspection order is created.
            fDoReseed = rs2![DoReseed]
            fSeedDate = rs![RequestedDT]
            fSeedLevel = rs![LevelNum]
            fLastRequestDT = rs![RequestedDT]
            fLastLevelNum = rs![LevelNum]
        End If
    End If

PROC_EXIT:
    Set rs = Nothing
    Set rs2 = Nothing
    Set db = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = aClassName & " SetUp" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT

End Sub

Public Function incLevel(aLevelNum As Integer) As Integer
    incLevel = 0
    If aLevelNum = 0 Then
        aLevelNum = fDefStartLevel
    End If
    aLevelNum = aLevelNum + 1
    If aLevelNum > fNumOfLevels Then
        aLevelNum = 1
    End If
    incLevel = aLevelNum
End Function

Public Function CalcNextInspection(ByRef ErrState As Integer, ByRef WarnState As Integer, ByRef aLevelNum As Integer, Optional DoPostErr As Boolean = True) As Date

    Dim msg As String
    Dim v As Variant
    Dim WarnA As Boolean
    Dim WarnB As Boolean

    On Error GoTo PROC_ERR

    CalcNextInspection = Empty
    aLevelNum = fDefStartLevel
    
    ErrState = 4
    WarnState = 2
    WarnA = False
    WarnB = False
    
    If ((fIsNewCustomer = True) Or (fDoReseed = True)) Then
        ' -----------------------------------------------
        ' NEW CUSTOMER OR RE-SEED REQUEST...
        ' -----------------------------------------------
        If fIsNewCustomer And fDoReseed = False Then
            WarnA = True
            fDoReseed = True
        End If
        
        If (WarnA = True) And DoPostErr Then
            ' send an WARNING message to log?
            mdlLog.AppendLog aCode & " - ReSeed value incorrect.", _
                             "Bad field value in the customer site LINK ID: " & CStr(fCustSiteID) & "." & _
                             vbCrLf & "A 'New Customer Site' (no inspection history) requires DoReSeed to be TRUE." & _
                             vbCrLf & "The value was adjusted.", _
                             CallerID, 2, aCompanyInfoID
        End If
        
        
        CalcNextInspection = Now()
        If Nz(fSeedDate, 0) > 0 Then
            If IsDate(fSeedDate) Then
                CalcNextInspection = CDate(fSeedDate)
                ErrState = 0
            End If
        End If
        aLevelNum = fDefStartLevel
        If Nz(fSeedLevel, 0) > 0 Then
            If fSeedLevel <= fNumOfLevels Then
                aLevelNum = fSeedLevel
                WarnB = True
            End If
        End If
        
        If (ErrState > 0) And DoPostErr Then
            ' send an error message to log?
            mdlLog.AppendLog aCode & " - Bad Seed Date.", _
                             "The seed date in the customer site LINK ID: " & CStr(fCustSiteID) & " " & _
                             "was either NULL or invalid. The site will be skipped!" & _
                             vbCrLf & "(A valid date is needed to 'seed' the inspection order.)", _
                             CallerID, 4, aCompanyInfoID
        End If
        
        If ((WarnA = False) And (WarnB = False)) Then
            WarnState = 0
        End If
        
        If (WarnB = True) And DoPostErr Then
            ' send an WARNING message to log?
            mdlLog.AppendLog aCode & " - Bad Level Number.", _
                             " The seed level in the customer site LINK ID: " & CStr(fCustSiteID) & " was invalid." & _
                             " The system default start level was assigned.", _
                             CallerID, 2, aCompanyInfoID
        End If
        
    
        
    Else
        ' -----------------------------------------------
        ' CUSTOMER with a least one previous inspection order
        ' -----------------------------------------------
        ' ADD INTERVAL ..... TO LAST INSPECTION ORDER
        fCalcNextRequestedDT = CalcNextRequestDT(ErrState, DoPostErr)
        ' INC LEVEL ..... TO LAST INSPECTION ORDER
        fCalcNextLevelNum = CalcGetNextLevelNum(WarnState, DoPostErr)
        
        CalcNextInspection = fCalcNextRequestedDT
        aLevelNum = fCalcNextLevelNum
        
    End If

PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = aClassName & " CalcNextInspection" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT

End Function


' ADD INTERVAL ..... TO LAST INSPECTION ORDER
Private Function CalcNextRequestDT(Optional ByRef ErrState As Integer = 0, Optional DoPostErr As Boolean = True) As Date
    Dim v As Variant
    
    CalcNextRequestDT = Empty
    ErrState = 4
    If Nz(fLastRequestDT, 0) > 0 Then
        If IsDate(fLastRequestDT) Then
            CalcNextRequestDT = DateAdd("m", fServiceInterval, fLastRequestDT)
            ErrState = 0
        End If
    End If
    
    If (ErrState > 0) And DoPostErr Then
        ' send an error message to log?
        mdlLog.AppendLog aCode & " - No RequestedDT found.", _
                         "The RequestedDT date in Inspection Order (ID: " & CStr(fInspectionOrderID) & ") " & _
                         "was either NULL or invalid. The site will be skipped!" & _
                         vbCrLf & "(A 'pevious' RequestedDT date is needed to create the 'next' order.)", _
                         CallerID, 4, aCompanyInfoID
    End If
    
End Function

' INC LEVEL ..... TO LAST INSPECTION ORDER
Private Function CalcGetNextLevelNum(Optional ByRef WarnState As Integer = 0, Optional DoPostErr As Boolean = True) As Integer
    CalcGetNextLevelNum = 0
    WarnState = 2
    
    CalcGetNextLevelNum = fDefStartLevel
    If Nz(fLastLevelNum, 0) > 0 Then
        CalcGetNextLevelNum = incLevel(CInt(fLastLevelNum))
        WarnState = 0
    End If
    
    If (WarnState > 0) And DoPostErr Then
        ' send an WARNING message to log?
        mdlLog.AppendLog aCode & " - Bad Level Number.", _
                         " The reference order (ID: " & CStr(fInspectionOrderID) & " has an invalid level number." & _
                         " The system default start level was assigned.", _
                         CallerID, 2, aCompanyInfoID
    End If
    
End Function

'
'
'Public Function IsWIP() As Boolean
'    IsWIP = True
'    If fInspectionStatusID = 2 Or fInspectionStatusID = 3 Then
'        IsWIP = False
'    End If
'End Function







