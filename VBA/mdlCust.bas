Attribute VB_Name = "mdlCust"
Option Compare Database
Option Explicit

Private mRunning As Boolean
Private vReturnvalue As Variant
Private mOpenArgs As String
Const ModuleName As String = "mdlCust"

' +-----------------------------------------------------------
' |
' |  properties for communicating with _HRFind
' |
Public Property Get Running() As Boolean
Running = mRunning
End Property

Public Property Let ReturnValue(X As Variant)
vReturnvalue = X
End Property

Public Property Get ReturnValue() As Variant
ReturnValue = vReturnvalue
End Property

Public Sub ViewCustDuplicity()
    DoCmd.OpenForm "xDlgCust_Duplicity", , , , , acDialog
    DoCmd.Close acForm, "xDlgCust_Duplicity"
End Sub

Public Function CustSite_Delete(ByVal aCustSiteID As Long) As Boolean
Dim vOpenArgs As String
Dim msg As String
Dim dbs As Database

On Error GoTo PROC_ERR
    vReturnvalue = vbNull
    CustSite_Delete = False
    
    vOpenArgs = CStr(aCustSiteID)
    DoCmd.OpenForm "xDlgCustSite_Delete", , , , , acDialog, vOpenArgs
    DoCmd.Close acForm, "xDlgCustSite_Delete"
    If vReturnvalue = 1 Then
        Set dbs = CurrentDb
        ' attempt to delete the CustSiteID
        dbs.Execute "DELETE FROM dbo_CustSite WHERE [CustSiteID] = " & CStr(aCustSiteID), dbFailOnError + dbSeeChanges
        CustSite_Delete = True
        dbs.Close
        Set dbs = Nothing
    End If

    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
    
        vReturnvalue = vbNull
        
        msg = ModuleName & "Cust_Exists" & vbCrLf & _
        "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        
    End If
    Resume PROC_EXIT
End Function

Public Function GetCustName(ByVal aCustomerID As Long) As String
Dim v As Variant
    GetCustName = vbNullString
    v = DLookup("[CustName]", "dbo_Customer", "[CustomerID] = " & CStr(aCustomerID))
    If Nz(v, 0) > 0 Then
        GetCustName = CStr(v)
    End If
End Function


Public Function Cust_Exists(ByVal aFirstName As String, ByVal aLastName As String) As Boolean
Dim SQL As String
Dim dbs As Database
Dim rst As Recordset
Dim str1 As String
Dim str2 As String
Dim msg As String
On Error GoTo PROC_ERR

    Cust_Exists = False
    str1 = Trim(UCase(Nz(aFirstName, vbNullString)))
    str2 = Trim(UCase(Nz(aLastName, vbNullString)))
    SQL = _
        "SELECT dbo_HR.HRID, UCase(Nz([FirstName],'')) AS s1, UCase(Nz([LastName],'')) AS s2 " & _
        "FROM dbo_HR " & _
        "WHERE (((UCase(Nz([FirstName],'')))=UCase( '" & str1 & "')) AND ((UCase(Nz([LastName],'')))=UCase('" & str2 & "')));"
    
    Set dbs = CurrentDb
    Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then Cust_Exists = True
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "Cust_Exists" & vbCrLf & _
        "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Function

Public Function Cust_PrimaryContactNumber(aCustomerID As Long) As String
    Dim SQL As String, msg As String, s As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    
    On Error GoTo PROC_ERR
    s = vbNullString
    Cust_PrimaryContactNumber = vbNullString
    If aCustomerID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = "Select [ContactNum] FROM dbo_CustContactNum WHERE [CustomerID] = " & CStr(aCustomerID) & _
                " AND [IsArchived] <> True AND [ContactNumTypeID] = 1 " & _
                " ORDER BY [CreatedOn] DESC ;"
        ' BSA correct method to use DAO to connect to MSSQL
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
            If .RecordCount > 0 Then
                s = ![ContactNum]
            End If
            End With
        End If
        If Len(s) > 0 Then
            Cust_PrimaryContactNumber = mdlToolBox.CleanContactNum(s)
        End If
    End If
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    Set dbs = Nothing
    On Error Resume Next
    Exit Function
PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "Cust_PrimaryContactNumber" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Function

Public Function Cust_PrimaryAddress(aCustomerID As Long) As String
    Dim SQL As String, msg As String, s As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    
    On Error GoTo PROC_ERR
    s = vbNullString
    Cust_PrimaryAddress = vbNullString
    If aCustomerID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = "Select [Address], [dbo_Postcode].[Suburb] AS s1, [dbo_Postcode].[Postcode] AS s2  FROM dbo_CustAddress " & _
                "LEFT JOIN dbo_Postcode ON dbo_CustAddress.PostcodeID = dbo_Postcode.PostcodeID " & _
                " WHERE [CustomerID] = " & CStr(aCustomerID) & _
                " AND [IsArchived] <> True AND [AddressTypeID] = 1 " & _
                " ORDER BY [CreatedOn] DESC ;"
        ' BSA correct method to use DAO to connect to MSSQL
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
            If .RecordCount > 0 Then
                s = Nz(![Address], vbNullString) & ", " & Nz(![s1], vbNullString) & " " & Nz(![s2], vbNullString)
            End If
            End With
        End If
        If Len(s) > 0 Then
            Cust_PrimaryAddress = s
        End If
    End If
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    Set dbs = Nothing
    On Error Resume Next
    Exit Function
PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & "Cust_PrimaryAddress" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Function


