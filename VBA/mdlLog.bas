Attribute VB_Name = "mdlLog"
Option Compare Database
Option Explicit


Const ModuleName As String = "mdlLog"
Const MAXRECORDS As Long = 200

Public Sub AppendLog(aTitle As String, _
        aDetail As String, _
        aCallerID As Long, _
        Optional aErrLevelID As Long = 1, _
        Optional aCompanyInfoID As Long = 1)
        
Dim strSQL As String
Dim rs As Recordset
Dim db As Database
Dim msg As String
On Error GoTo PROC_ERR

    Set db = CurrentDb

    ' count the number of records
    strSQL = _
    "SELECT dbo_Log.LogID, dbo_Log.Title, dbo_Log.Detail, dbo_Log.CreatedOn, dbo_Log.CompanyInfoID, " & _
    "dbo_Log.LogCallerID, dbo_Log.LogErrLevelID FROM dbo_Log;"
    
    TrimStack aCompanyInfoID
    
    Set rs = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        rs.AddNew
        rs![Title] = aTitle
        rs![Detail] = aDetail
        rs![CreatedOn] = Now()
        rs![CompanyInfoID] = aCompanyInfoID 'default = 1
        rs![LogCallerID] = aCallerID
        rs![LogErrLevelID] = aErrLevelID 'default = NONE
        rs.Update
    rs.Close
    db.Close
    
PROC_EXIT:
    Set rs = Nothing
    Set db = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " AppendLog" & vbCrLf & _
        "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT


End Sub

Public Sub ViewLog()
Dim msg As String
Dim mOpenArgs As String
Dim aID As Long

On Error GoTo PROC_ERR
    aID = mdlCompany.GetCompanyInfoID()
    TrimStack aID
    mOpenArgs = CStr(aID)
    DoCmd.OpenForm "xDlgLog_View", , , , , acDialog, mOpenArgs
    DoCmd.Close acForm, "xDlgLog_View"
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ViewLog" & vbCrLf & _
        "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Public Function ClearLog() As Boolean
    Dim db As Database
    Dim msg As String
    Dim intResponse As Integer
    Dim s As String

    On Error GoTo PROC_ERR
    ClearLog = False

    Set db = CurrentDb
    s = mdlCompany.GetCompanyCode()
    
    intResponse = MsgBox("Clear the log of all system messages? ", _
                         vbYesNo Or vbQuestion Or vbDefaultButton2, _
                         s & " - Clear Log?")
    If intResponse = vbYes Then
        ' clear the log of all records
        db.Execute "DELETE * FROM dbo_Log", dbFailOnError + dbSeeChanges
        ClearLog = True
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
    
        ClearLog = False
        
        msg = ModuleName & "ClearLog" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        
    End If
    Resume PROC_EXIT
End Function

Public Sub TrimStack(aCompanyInfoID As Long)
Dim strSQL As String
Dim rs As Recordset
Dim db As Database
Dim count As Long
Dim diff As Long
Dim msg As String
Dim qdf As QueryDef

    On Error GoTo PROC_ERR

    If Nz(aCompanyInfoID, 0) = 0 Then
        Exit Sub
    End If
    
    Set db = CurrentDb

    ' count the number of records
    strSQL = _
    "SELECT [LogID] FROM dbo_Log WHERE [CompanyInfoID] = " & CStr(aCompanyInfoID)
    Set rs = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rs.RecordCount > 0 Then
        rs.MoveLast
        count = rs.RecordCount
        rs.Close
    Else
        Exit Sub
    End If
    

    ' diff
    diff = count - MAXRECORDS
    If diff <= 0 Then
        Exit Sub
    End If
    
    ' trims the bottom 100 records -
    
    strSQL = _
    "PARAMETERS aCompanyInfoID Long; " & vbCrLf & _
    "SELECT TOP " & CStr(diff) & " dbo_Log.LogID, dbo_Log.Caption, dbo_Log.CreatedOn, dbo_Log.CompanyInfoID, " & _
    "dbo_Log.LogCallerID, dbo_Log.LogErrLevelID " & _
    "FROM dbo_Log WHERE (((dbo_Log.CompanyInfoID) = [aCompanyInfoID])) " & _
    "ORDER BY dbo_Log.CreatedOn;"
    
    db.QueryDefs("xqry_Log_Bottom100").sql = strSQL
    
    Set qdf = db.QueryDefs("xqry_Log_TrimStack")
    qdf.Parameters("aCompanyInfoID").Value = aCompanyInfoID
    qdf.Execute dbFailOnError + dbSeeChanges
    qdf.Close
    
    
PROC_EXIT:
        Set db = Nothing
        Set rs = Nothing

    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " CullLog" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    

End Sub
