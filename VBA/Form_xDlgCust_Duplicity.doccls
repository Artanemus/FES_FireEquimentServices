Option Compare Database
Option Explicit

Const ModuleName As String = "xDlgHR_Duplicity"
' Const MainTable As String = "dbo_Site"
Private CompanyCodeStr As String

Private Sub cmdCancel_Click()
    ' mdl#.ReturnValue = vbNull
    Me.Visible = False
End Sub

Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        cmdCancel_Click
        KeyCode = 0
    End If
End Sub

Private Sub Form_Load()
    Dim Msg As String
    Dim rst As DAO.Recordset
    Dim SQL As String
    Dim v As Variant
        
    On Error GoTo PROC_ERR
    
    CompanyCodeStr = mdlCompany.GetCompanyCode
    Me.lblCompanyCode.Caption = CompanyCodeStr
    DynamicResize
        
    ' NUMBER OF CONTACT NUMBERS THAT HAVE BEEN DUPICATED
    Set rst = CurrentDb.OpenRecordset("xqryDuplicates_SumCustContactNum", dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then
        Me.txtErr3.Caption = CStr(rst.Fields("SumOfCountOfContactNum"))
    Else
        Me.txtErr3.Caption = "0"
    End If
    rst.Close
    Set rst = Nothing
    
    ' LOOK FOR NULL RECORDS.
    SQL = _
        "SELECT Count(dbo_Customer.CustomerID) AS CountOfCustomerID FROM dbo_Customer WHERE (([CustName] Is Null));"
    Set rst = CurrentDb.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then
        Me.txtErr1.Caption = CStr(rst.Fields("CountOfCustomerID"))
    Else
        Me.txtErr1.Caption = "0"
    End If
    rst.Close
    Set rst = Nothing

    SQL = _
        "SELECT Count(dbo_CustAddress.CustAddressID) AS CountOfCustAddressID FROM dbo_CustAddress WHERE ((dbo_CustAddress.Address) Is Null);"
    Set rst = CurrentDb.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then
        Me.lblEmptyAddress.Caption = CStr(rst.Fields("CountOfCustAddressID"))
    Else
        Me.lblEmptyAddress.Caption = "0"
    End If
    rst.Close
    Set rst = Nothing
    
    SQL = _
        "SELECT Count(dbo_CustContactNum.CustContactNumID) AS CountOfCustContactNumID FROM dbo_CustContactNum WHERE ((dbo_CustContactNum.ContactNum) Is Null);"
    Set rst = CurrentDb.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then
        Me.lblEmptyContactNum.Caption = CStr(rst.Fields("CountOfCustContactNumID"))
    Else
        Me.lblEmptyContactNum.Caption = "0"
    End If
    rst.Close
    Set rst = Nothing
    
    SQL = _
        "SELECT Count(dbo_CustEmail.CustEmailID) AS CountOfCustEmailID FROM dbo_CustEmail WHERE ((dbo_CustEmail.Email) Is Null);"
    Set rst = CurrentDb.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then
        Me.lblEmptyEmail.Caption = CStr(rst.Fields("CountOfCustEmailID"))
    Else
        Me.lblEmptyEmail.Caption = "0"
    End If
    rst.Close
    Set rst = Nothing
    
    
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = Me.Name & " Form_Load" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
    Dim Msg As String

    On Error GoTo PROC_ERR

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = Me.Name & " Form_Open" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub DynamicResize()
    'Variables
    Dim lngCount As Long
    Dim lngWindowHeight As Long
    Dim lngOldWindowHeight As Long
    Dim lngDeltaTop As Long
    Dim lngMaxRecordsToShow As Long
    Dim lngMinRecordsToShow As Long
    
    Dim rst As DAO.Recordset

    lngMaxRecordsToShow = 20
    lngMinRecordsToShow = 10
    'Find the amount of records in form
    Set rst = Me.RecordsetClone
    If Not rst.EOF Then rst.MoveLast
    lngCount = rst.RecordCount
    'Cleanup
    Set rst = Nothing
    'Assert Minimum height
    If lngCount <= lngMinRecordsToShow Then lngCount = lngMinRecordsToShow
    'Check whether there are more then Max amount of records
    If lngCount > lngMaxRecordsToShow Then
        lngCount = lngMaxRecordsToShow
        'Enable vertical scrollbar
        Me.ScrollBars = 2 'Vertical
    Else
        'Disable scrollbars
        Me.ScrollBars = 0 'None
    End If
    'Calculate new windowheight.
    'If you do not have a header/footer, or they are not visible adjust accordingly
    lngWindowHeight = Me.FormHeader.Height + _
                      (Me.Detail.Height * lngCount) + _
                      Me.FormFooter.Height + _
                      20 ' 567
    'The 567 is to account for title bar Height.
    'If you use thin border, adjust accordingly
    'The form will be "shortened" and we need to adjust the top property as well to keep it properly centered
    lngOldWindowHeight = Me.WindowHeight
    lngDeltaTop = (lngOldWindowHeight - lngWindowHeight) / 2
    'Use the move function to move the form
    Me.Move Me.WindowLeft, Me.WindowTop + lngDeltaTop, , lngWindowHeight

End Sub

