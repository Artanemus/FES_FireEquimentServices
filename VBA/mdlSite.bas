Attribute VB_Name = "mdlSite"
Option Compare Database
Option Explicit

Private vReturnvalue As Variant
Private mOpenArgs As String
Private mDoReseed As Boolean
Private mSeedDate As Date
Private mSeedLevel As Integer
Private mMode As Integer
Private mInspectOrderID_Active As Long

Const ModuleName As String = "mdlSite"

Private Property Get HasParent(ByRef f As Form) As Boolean
    HasParent = False
    On Error GoTo handler
    HasParent = TypeName(f.Parent.Name) = "String"
    Exit Property
handler:
End Property

Public Property Get ReturnValue() As Variant
    ReturnValue = vReturnvalue
End Property

Public Property Let ReturnValue(X As Variant)
    vReturnvalue = X
End Property


Public Property Get DoReseed() As Boolean
    DoReseed = mDoReseed
End Property

Public Property Let DoReseed(X As Boolean)
    mDoReseed = X
End Property

Public Property Get SeedDate() As Date
    SeedDate = mSeedDate
End Property

Public Property Let SeedDate(X As Date)
    mSeedDate = X
End Property

Public Property Get SeedLevel() As Integer
    SeedLevel = mSeedLevel
End Property

Public Property Let SeedLevel(X As Integer)
    mSeedLevel = X
End Property

Public Property Get Mode() As Integer
    Mode = mMode
End Property

Public Property Let Mode(X As Integer)
    mMode = X
End Property

Public Property Get InspectOrderID_Active() As Long
    InspectOrderID_Active = mInspectOrderID_Active
End Property

Public Property Let InspectOrderID_Active(X As Long)
    mInspectOrderID_Active = X
End Property


Public Sub ViewSiteDuplicity()
    DoCmd.OpenForm "xDlgSite_Duplicity", , , , , acDialog
    DoCmd.Close acForm, "xDlgSite_Duplicity"
End Sub

Public Function GetSitexAddress(ByVal aSiteID As Long) As String
Dim v As Variant
Dim s As String
    Dim msg As String
    On Error GoTo PROC_ERR
    
    If Nz(aSiteID, 0) = 0 Then
        Exit Function
    End If

    GetSitexAddress = vbNullString
    v = DLookup("[Address]", "dbo_Site", "[SiteID] = " & CStr(aSiteID))
    If Nz(v, 0) > 0 Then
        s = PrettyAddress64Char(CStr(v))
        GetSitexAddress = s
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " GetSitexAddress" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function


Public Function Site_Exists(ByVal aAddress As String) As Boolean
    Dim SQL As String
    Dim dbs As Database
    Dim rst As Recordset
    Dim str1 As String
    Dim str2 As String
    Dim msg As String
    On Error GoTo PROC_ERR

    Site_Exists = False
    str1 = Trim(UCase(Nz(aAddress, vbNullString)))
    SQL = _
           "SELECT dbo_Site.SiteID, UCase(Nz([Address],'')) AS s1 " & _
           "FROM dbo_Site " & _
           "WHERE UCase(Nz([Address],'')) = UCase( '" & str1 & "');"
    
    Set dbs = CurrentDb
    Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rst.RecordCount > 0 Then Site_Exists = True
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " SiteExists" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Function

Public Function Site_SiteManager(aSiteID As Long) As String
    ' Return the primary phone (PRIMARY) , modbile phone (Mobile), office phone (Office) , home phone (Home)

End Function

Public Function Site_PrimaryPhone_SiteManager(aSiteID As Long) As String
    ' Returns the PRIMARY email address

End Function

Public Sub GotoSite(aSiteID As Long)
    Dim strCriteria As String
    Dim rst As DAO.Recordset
    Dim FormNameToUseStr As String
    ' Reference re - directed
    ' Me! ... Cutomer ID hasn't been placed in the form but included in Query.
    If (aSiteID > 0) Then
        FormNameToUseStr = "_Site"
        If Not IsLoaded(FormNameToUseStr) Then
            DoCmd.OpenForm FormNameToUseStr, acNormal
        End If
        Forms(FormNameToUseStr).FilterOn = False
        Set rst = Forms(FormNameToUseStr).RecordsetClone
        strCriteria = "[SiteID] = " & CStr(aSiteID)
        rst.FindFirst strCriteria
        If Not rst.NoMatch Then
            Forms(FormNameToUseStr).Bookmark = rst.Bookmark
            Forms(FormNameToUseStr).SetFocus
            Exit Sub
        Else
            MsgBox "NoMatch :: Unable to bookmark ID.", , "Error finding booking..."
        End If
        Set rst = Nothing
    Else
        Beep
    End If
    
End Sub


Public Function DisableSite(ByVal aCustSiteID As Long) As Boolean
    Dim v As Variant
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String
    Dim Results As Integer
    Dim vOpenArgs As String
    Dim CancelledOrderStr As String
    Dim doDisplayCancelledOrders As Boolean

    On Error GoTo PROC_ERR
       
    DisableSite = False
    CancelledOrderStr = vbNullString
    doDisplayCancelledOrders = False
    
    SQL = "Select [CustSiteID], [IsEnabled], [DoReseed] from dbo_CustSite where [CustSiteID] = " & CStr(aCustSiteID)
    Set dbs = CurrentDb
    Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If Not IsNull(rst) Then
        rst.MoveFirst
        If rst![IsEnabled] = False Then
            Beep
            Exit Function
        Else
            vOpenArgs = CStr(aCustSiteID)
            DoCmd.OpenForm "xDlgLink_Disable", , , , , acDialog, vOpenArgs
            DoCmd.Close acForm, "xDlgLink_Disable"
        
            If vReturnvalue = 1 Or vReturnvalue = 2 Then
                rst.Edit
                rst.Fields("IsEnabled") = False
                rst.Fields("DoReseed") = False
                rst.Update
                DisableSite = True
                If vReturnvalue = 2 Then
                    ' cancell all outstanding inspection orders
                    rst.Close
                    Set rst = Nothing
                    SQL = _
                           "SELECT dbo_InspectionOrder.InspectionOrderID, dbo_InspectionOrder.InspectionStatusID, dbo_InspectionOrder.CustSiteID " & _
                           "FROM dbo_InspectionOrder " & _
                           "WHERE (((dbo_InspectionOrder.InspectionStatusID)<>2 " & _
                           "Or (dbo_InspectionOrder.InspectionStatusID)<>3) " & _
                           "AND ((dbo_InspectionOrder.CustSiteID)=" & CStr(aCustSiteID) & " ));"
                    Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
                    If (rst.RecordCount > 0) Then
                        rst.MoveFirst
                        Do Until rst.EOF
                            If (rst![InspectionStatusID] <> 2) And (rst![InspectionStatusID] <> 3) Then
                                CancelledOrderStr = CancelledOrderStr & ", " & CStr(rst![InspectionOrderID])
                                doDisplayCancelledOrders = True
                                rst.Edit
                                rst![InspectionStatusID] = 3
                                rst.Update
                            End If
                            rst.MoveNext
                        Loop
                    End If
                End If
            End If
        End If
    End If
    
    If doDisplayCancelledOrders Then
    
        msg = "The following inspection orders were cancelled." & vbCrLf & _
              CancelledOrderStr
        Results = MsgBox(msg, _
        VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbInformation Or VbMsgBoxStyle.vbDefaultButton1, _
        mdlCompany.GetCompanyCode() & " - CANCELLED ORDERS")
    
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    Set dbs = Nothing
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " DisableSite" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Function

Public Function SetInspectionOrderActive(ByVal aInspectionOrderID As Long) As Boolean
    Dim SQL As String
    Dim dbs As Database
    Dim rst As Recordset
    Dim msg As String
    
    On Error GoTo PROC_ERR
    SetInspectionOrderActive = False
    If aInspectionOrderID > 0 Then
        SQL = _
                "UPDATE dbo_InspectionOrder SET dbo_InspectionOrder.InspectionStatusID = 1" & _
                " WHERE (((dbo_InspectionOrder.InspectionOrderID)=" & CStr(aInspectionOrderID) & "));"
        Set dbs = CurrentDb
        dbs.Execute SQL, dbFailOnError + dbSeeChanges
        SetInspectionOrderActive = True
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " SetInspectionOrderActive" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
        
End Function


' +---------------------------------------------
' Insert a Site into the dbo_CustSite
' +---------------------------------------------

Public Sub LinkSite(ByVal aSiteID As Long, ByVal aCustomerID As Long)
    Dim s As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String

    On Error GoTo PROC_ERR
       
    If aSiteID > 0 And aCustomerID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = "Select * FROM dbo_CustSite"
        ' BSA correct method to use DAO to connect to MSSQL
        ' else use
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
                .AddNew
                ![SiteID] = aSiteID              ' manatory
                ![CustomerID] = aCustomerID      ' manatory
                ![CreatedOn] = Now()
                ![IsEnabled] = False             ' Ensures inspection orders are not generated
                ![DoReseed] = True               ' Actual state isn't important here, but init is.
                ![SeedDate] = Empty           ' Must have a valid date for inspection orders to be generated
                ![SeedLevel] = mdlCompany.GetGlobalDefStartLevel ' Safe
                ![IsArchived] = False            ' Default
                .Update
                
                ' RETURN NEW CUSTSITE RECORD?
                ' ------------------------------
                '.Bookmark = .LastModified
                'NewSiteID = ![CustSiteID]
                ' ------------------------------
            End With
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    Set dbs = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " LinkSiteToCust" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

' +---------------------------------------------
' remove a Site from the dbo_CustSite
' +---------------------------------------------

Public Sub UnLinkSite(ByVal aSiteID As Long, ByVal aCustomerID As Long)
    Dim s As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String

    On Error GoTo PROC_ERR
       
    If aSiteID > 0 And aCustomerID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = "Select * FROM dbo_CustSite WHERE [CustomerID] = " & CStr(aCustomerID) & " AND [SiteID] = " & CStr(aSiteID)
        ' TODO : TEST FOR WORKORDERS
        ' ###########################################################################
        ' IF NO WORKORDERS THEN....
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
                ' clear the customer contact details within the site
                .Delete
            End With
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " removeCustSiteLink" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Public Sub ArchiveLinkSite(ByVal aSiteID As Long, ByVal aCustomerID As Long)
    Dim s As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String

    On Error GoTo PROC_ERR
       
    If aSiteID > 0 And aCustomerID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = "Select * FROM dbo_CustSite WHERE [CustomerID] = " & CStr(aCustomerID) & " AND [SiteID] = " & CStr(aSiteID)
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
                ' clear the customer contact details within the site
                ![IsArchived] = True
            End With
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " removeCustSiteLink" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Public Function IsCustLinkedToSite(ByVal aCustomerID As Long, ByVal aSiteID As Long) As Boolean
Dim v As Variant
    IsCustLinkedToSite = False
    v = DLookup("CustSiteID", "dbo_CustSite", "[SiteID] = " & CStr(aSiteID) & " AND [CustomerID] = " & CStr(aCustomerID))
    If Nz(v, 0) > 0 Then
        IsCustLinkedToSite = True
    End If
End Function

Public Function ConfirmDisableCustSite(ByVal aCustSiteID As Long) As Boolean
    Dim vOpenArgs As String
    Dim msg As String

    On Error GoTo PROC_ERR

    ConfirmDisableCustSite = False
    
    vOpenArgs = CStr(aCustSiteID)
    DoCmd.OpenForm "xDlgLink_Disable", , , , , acDialog, vOpenArgs
    DoCmd.Close acForm, "xDlgLink_Disable"
    If vReturnvalue = 1 Then
        ' Disable custSite
        DisableSite aCustSiteID
        ConfirmDisableCustSite = True
    ElseIf vReturnvalue = 2 Then
        'Disable custSite and cancell all outstanding orders
        DisableSite aCustSiteID
        mdlInspection.CancelOutstandingInspectionOrders aCustSiteID
        ConfirmDisableCustSite = True
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ConfirmDisableCustSite Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Function

Public Function ConfirmLinkCustToSite(ByVal aCustomerID As Long, ByVal aSiteID As Long) As Boolean
    Dim vOpenArgs As String
    Dim msg As String

On Error GoTo PROC_ERR

    ConfirmLinkCustToSite = False
    
    vOpenArgs = CStr(aCustomerID) & "|" & CStr(aSiteID)
    DoCmd.OpenForm "xDlgSite_Link", , , , , acDialog, vOpenArgs
    DoCmd.Close acForm, "xDlgSite_Link"
    If vReturnvalue = 1 Or vReturnvalue = True Then
        ConfirmLinkCustToSite = True
    End If
    ' returns true of false
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ConfirmLinkCustToSite Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    

End Function

Public Function CountLinksToSite(ByVal aSiteID As Long) As Long
    Dim s As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String

    On Error GoTo PROC_ERR
    
    CountLinksToSite = 0
       
    If aSiteID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = _
            "SELECT dbo_CustSite.SiteID, dbo_CustSite.CustomerID, dbo_CustSite.IsEnabled " & _
            "FROM dbo_CustSite " & _
            "WHERE (((dbo_CustSite.SiteID)= " & CStr(aSiteID) & " ) );"

        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            rst.MoveLast
            CountLinksToSite = rst.RecordCount
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    Set dbs = Nothing
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " CountLinksToSite" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function

' +---------------------------------------------
' addNew SiteStation (Equipment)
' +---------------------------------------------
Public Sub addNewSiteStation(ByVal aSiteID As Long, ByVal aEquipmentID As Long)
    Dim s As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String

    On Error GoTo PROC_ERR
    
    If aSiteID > 0 And aEquipmentID > 0 Then
        'create a new contactlink record for the customer
        Set dbs = CurrentDb
        SQL = "Select * FROM dbo_SiteStation"
        ' BSA correct method to use DAO to connect to MSSQL
        ' else use
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
                .AddNew
                ![SiteID] = aSiteID
                ![EquipmentID] = aEquipmentID
                ![CreatedOn] = Now()
                .Update
                .Bookmark = .LastModified
                vReturnvalue = ![SiteStationID]
            End With
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " addNewSiteStation" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Public Sub SetHydrantCommissionDate(StationID As Long)
    Dim v As Variant
    Dim msg As String
    Dim cCode As String
    
    vReturnvalue = vbNull
    
    If Nz(StationID, 0) = 0 Then
        Exit Sub
    End If
    
    ' Get the  equipment type of the station
    v = DLookup("[EquipmentID]", "dbo_Station", "[StationID] = " & CStr(StationID))
    If Nz(v, 0) > 0 Then
        v = DLookup("[EquipTypeID]", "dbo_Equipment", "[EquipmentID] = " & CStr(CLng(v)))
        If Nz(v, 0) > 0 Then
            If v <> 1 Then
                ' message dialogue
                msg = "The Equipment for this station isn't a Hydrant." & vbCrLf & _
                      "The dialogue will exit."
                cCode = mdlCompany.GetCompanyCode
                MsgBox msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbCritical, cCode & " Error"
                
                Exit Sub
            Else
                mOpenArgs = CStr(StationID)
                ' run the dialogue .....
                
                DoCmd.OpenForm "xDlgSite_Hydrant", , , , , acDialog, mOpenArgs
                DoCmd.Close acForm, "xDlgSite_Hydrant"
                
                ' Return value is the hydrants commission date
                '                If vReturnValue <> 0 Then
                '                End If
            End If
        End If
    End If


End Sub


Public Sub SetHoseReelCommissionDate(StationID As Long)
    Dim v As Variant
    Dim msg As String
    Dim cCode As String
    
    vReturnvalue = vbNull
    
    If Nz(StationID, 0) = 0 Then
        Exit Sub
    End If
    
    ' Get the  equipment type of the station
    v = DLookup("[EquipmentID]", "dbo_Station", "[StationID] = " & CStr(StationID))
    If Nz(v, 0) > 0 Then
        v = DLookup("[EquipTypeID]", "dbo_Equipment", "[EquipmentID] = " & CStr(CLng(v)))
        If Nz(v, 0) > 0 Then
            If v <> 9 Then
                ' message dialogue
                msg = "The Equipment for this station isn't a Hose Reel." & vbCrLf & _
                      "The dialogue will exit."
                cCode = mdlCompany.GetCompanyCode
                MsgBox msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbCritical, cCode & " Error"
                
                Exit Sub
            Else
                mOpenArgs = CStr(StationID)
                ' run the dialogue .....
                
                DoCmd.OpenForm "xDlgSite_HoseReel", , , , , acDialog, mOpenArgs
                DoCmd.Close acForm, "xDlgSite_HoseReel"
                
                ' Return value is the hose reel's commission date
                '                If vReturnValue <> 0 Then
                '                End If
            End If
        End If
    End If


End Sub


Public Sub SetExtingisherCommissionDate(StationID As Long)
    Dim v As Variant
    Dim msg As String
    Dim cCode As String
    
    vReturnvalue = vbNull
    
    If Nz(StationID, 0) = 0 Then
        Exit Sub
    End If
    
    ' Get the  equipment type of the station
    v = DLookup("[EquipmentID]", "dbo_Station", "[StationID] = " & CStr(StationID))
    If Nz(v, 0) > 0 Then
        v = DLookup("[EquipTypeID]", "dbo_Equipment", "[EquipmentID] = " & CStr(CLng(v)))
        If Nz(v, 0) > 0 Then
            If ((v < 3) Or (v > 8)) Then
                ' message dialogue
                msg = "The Equipment for this station isn't a Fire Extingisher." & vbCrLf & _
                      "The dialogue will exit."
                cCode = mdlCompany.GetCompanyCode
                MsgBox msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbCritical, cCode & " Error"
                
                Exit Sub
            Else
                mOpenArgs = CStr(StationID)
                ' run the dialogue .....
                
                DoCmd.OpenForm "xDlgSite_Extingisher", , , , , acDialog, mOpenArgs
                DoCmd.Close acForm, "xDlgSite_Extingisher"
                
                ' Return value is the hose reel's commission date
                '                If vReturnValue <> 0 Then
                '                End If
            End If
        End If
    End If


End Sub

Public Function GetCurrLinkedCustomer(aSiteID As Long) As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim msg As String
    Dim SQL As String

    On Error GoTo PROC_ERR

    GetCurrLinkedCustomer = vbNullString

    SQL = _
    "SELECT dbo_CustSite.SiteID, dbo_Customer.CustName, dbo_CustSite.IsEnabled" & _
    " FROM dbo_CustSite INNER JOIN dbo_Customer ON dbo_CustSite.CustomerID = dbo_Customer.CustomerID" & _
    " WHERE SiteID = " & CStr(aSiteID) & _
    " ORDER BY dbo_CustSite.IsEnabled DESC , dbo_CustSite.CreatedOn DESC; "
    
    If aSiteID > 0 Then
        Set dbs = CurrentDb
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If rst.RecordCount > 0 Then
            If Not IsNull(rst![CustName]) Then
                GetCurrLinkedCustomer = rst![CustName]
                If rst![IsEnabled] <> 0 Then
                    GetCurrLinkedCustomer = GetCurrLinkedCustomer & " (ENABLED)"
                End If
            End If
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " GetCurrLinkedCustomer" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Function


