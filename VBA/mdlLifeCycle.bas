Attribute VB_Name = "mdlLifeCycle"
Option Compare Database
Option Explicit

Const ModuleName As String = "mdlLifeCycle"


Public Function PrettyIntervalStr(days As Double) As String
    Dim f As Double
    Dim s As String
    Dim r As Integer
    
    PrettyIntervalStr = vbNullString
    
    If days >= 365 Then
        ' calc the number of years
        f = (days / 365#)
        r = (days Mod 365#)
        If r = 0 Then
            s = CStr(Int(days / 365#))
        Else
            s = Format(f, "0.0")
        End If
        If Len(s) > 0 Then
            PrettyIntervalStr = s & " year"
        End If
    End If
    If ((days < 365) And (days >= 30)) Then
        f = (days / 30#)
        s = Format(f, "0.0")
        If Len(s) > 0 Then
            PrettyIntervalStr = s & " month"
        End If
    End If
    If days < 30 Then
        PrettyIntervalStr = CStr(Int(days)) & " day"
    End If

End Function


Public Function GetMajorLifeCyclelStation(aStationID As Variant) As Double
    Dim v As Variant
    Dim SQL As String
    Dim dbs As Database
    Dim rst As Recordset
    Dim Msg As String

    On Error GoTo PROC_ERR
    
    GetMajorLifeCyclelStation = 0
    v = Null

    SQL = _
           "SELECT dbo_Station.StationID, dbo_Station.IsEmpty, dbo_Station.EquipmentID " & _
           "FROM dbo_Station " & _
           "WHERE (((dbo_Station.StationID)= " & CStr(aStationID) & "));"

    Set dbs = CurrentDb
    Set rst = dbs.OpenRecordset(SQL, dbOpenSnapshot, dbFailOnError + dbSeeChanges)
    
    If rst.RecordCount > 0 Then
        ' station hasn't been set by the user as 'empty'
        If Nz(rst.Fields("IsEmpty"), 0) = 0 Then
            ' a valid equipment ID has been assigned
            If Nz(rst.Fields("EquipmentID"), 0) > 0 Then
                GetMajorLifeCyclelStation = GetMajorLifeCycle(CLng(v))
            End If
        End If
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " GetMajorLifeCyclelStation" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Function

Public Function GetMajorLifeCycle(aEquipmentID As Variant) As Double
    Dim SQL As String
    Dim dbs As Database
    Dim rst As Recordset
    Dim Msg As String

    On Error GoTo PROC_ERR
    
    GetMajorLifeCycle = 0

    SQL = _
           "SELECT dbo_EquipType.MajorLifeCycle " & _
           "FROM dbo_Equipment " & _
           "LEFT JOIN dbo_EquipType ON dbo_Equipment.EquipTypeID = dbo_EquipType.EquipTypeID " & _
           "WHERE [EquipmentID] = " & CStr(aEquipmentID)
    
    Set dbs = CurrentDb
    Set rst = dbs.OpenRecordset(SQL, dbOpenSnapshot, dbFailOnError + dbSeeChanges)
    
    If rst.RecordCount > 0 Then
        If Nz(rst.Fields("MajorLifeCycle"), 0) > 0 Then
            GetMajorLifeCycle = CDbl(rst.Fields("MajorLifeCycle"))
        End If
    End If
    
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " GetMajorLifeCycle" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Function


