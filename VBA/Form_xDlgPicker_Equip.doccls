Option Compare Database
Option Explicit


Const MainFrm As String = "xDlgPicker_Equip"
Const SubFrm As String = "xDlgPicker_EquipSF"
Const MainTable As String = "dbo_Equipment"

Const PKey As String = "[EquipmentID]"
Const SearchFld As String = "[ShortCaption]"

Const ModuleName As String = "xDlgPicker_Equip"

Private aStationTypeID As Long

Private Sub cbxChemicalType_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cbxEquipBrand_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cmdClearBrand_Click()
    Me.cbxEquipBrand = vbNullString
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cmdClearChemicalType_Click()
    Me.cbxChemicalType = vbNullString
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cmdClearType_Click()
    Me.cbxEquipType = vbNullString
'    ChemicalVisibility False
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub ChemicalVisibility(IsVisible As Boolean)
    If IsVisible Then
        Me.lblChemicalType.Visible = True
        Me.cmdClearChemicalType.Visible = True
        Me.cbxChemicalType.Visible = True
    Else
        Me.lblChemicalType.Visible = False
        Me.cmdClearChemicalType.Visible = False
        Me.cbxChemicalType.Visible = False
        Me.cbxChemicalType = vbNullString
    End If
End Sub

Private Sub cbxEquipType_Change()
'    If Me.cbxEquipType.Column(0) = 3 Then
'        ChemicalVisibility True
'    Else
'        ChemicalVisibility False
'    End If
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub Form_Load()
    lblSearchStatus.Visible = False
    aStationTypeID = 0
    Me.cbxEquipType = vbNullString
    Me.cbxChemicalType = vbNullString
    ChemicalVisibility True
    Me.cbxEquipBrand = vbNullString
    DynamicResize
End Sub

Private Sub Form_Open(Cancel As Integer)
    txtTextBox = vbNullString
    If Me.txtTextBox.Visible Then Me.txtTextBox.SetFocus
    
    If Len(Me.OpenArgs) > 0 Then
        aStationTypeID = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
        
    End If
    
    SetSF_FilterOff
    
End Sub

Private Sub Form_Activate()
    If Me.txtTextBox.Visible Then Me.txtTextBox.SetFocus
End Sub

Public Sub Child_Called_DlbClick(Cancel As Integer)
    Form_DblClick Cancel
End Sub

Private Sub Form_DblClick(Cancel As Integer)
    cmdPICK_Click
End Sub

Private Sub cmdClear_Click()
    Me.txtTextBox = vbNullString
    If Me.txtTextBox.Visible Then Me.txtTextBox.SetFocus
    ParamChanged
End Sub

Private Sub cmdPICK_Click()
Dim strCriteria As String
Dim rst As DAO.Recordset
Dim v As Variant
    ' ##################################
    v = Me.Form(SubFrm).Form.Controls(PKey)
    ' ##################################
    If (Nz(v, 0) > 0) Then
        ' ######################################################
        mdlPicker.ReturnValue = Me.Form(SubFrm).Form.Controls(PKey)
        ' ######################################################
        Me.Visible = False
    Else
        Beep
    End If
    
End Sub


Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        mdlPicker.ReturnValue = 0
        KeyCode = 0
        Me.Visible = False
    End If
End Sub

Private Sub txtTextBox_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub SetSF_FilterOff()
    If aStationTypeID = 0 Then
        If Me.Form(SubFrm).Form.FilterOn Then
            Me.Form(SubFrm).Form.FilterOn = False
        End If
    Else
        Me.Form(SubFrm).Form.Filter = " [StationTypeID] = " & CStr(aStationTypeID)
        If Me.Form(SubFrm).Form.FilterOn = False Then
            Me.Form(SubFrm).Form.FilterOn = True
        End If
    End If
End Sub

Private Sub ParamChanged()
    ' variant - resolves NULL exceptions
    Dim aSearchStr As Variant
    Dim aEquipTypeStr As Variant
    Dim aEquipBrandStr As Variant
    Dim aChemicalTypeStr As Variant
    
    Dim msg As String
    Dim aFilterStr As String
    Dim fStr1 As String
    Dim fStr2 As String
    Dim fStr3 As String
    Dim fStr4 As String
    Dim fStr5 As String
    
    On Error GoTo PROC_ERR
    
    
    aFilterStr = vbNullString
    fStr1 = vbNullString
    fStr2 = vbNullString
    fStr3 = vbNullString
    fStr4 = vbNullString
        
    If (Me.txtTextBox Is Me.ActiveControl) Then
        aSearchStr = Me.txtTextBox.Text
    Else
        aSearchStr = Me.txtTextBox.Value
    End If
    
    If (Me.cbxEquipType Is Me.ActiveControl) Then
        aEquipTypeStr = Me.cbxEquipType.Text
    Else
        aEquipTypeStr = Me.cbxEquipType.Value
    End If
    If (Me.cbxEquipBrand Is Me.ActiveControl) Then
        aEquipBrandStr = Me.cbxEquipBrand.Text
    Else
        aEquipBrandStr = Me.cbxEquipBrand.Value
    End If
    If (Me.cbxChemicalType Is Me.ActiveControl) Then
        aChemicalTypeStr = Me.cbxChemicalType.Text
    Else
        aChemicalTypeStr = Me.cbxChemicalType.Value
    End If
    
    If (Len(Nz(aSearchStr, vbNullString)) > 0) Then
        fStr1 = SearchFld & " LIKE '%" & aSearchStr & "%'"
    End If
    If (Len(Nz(aEquipTypeStr, vbNullString)) > 0) Then
        fStr2 = " AND [EquipTypeStr] LIKE '%" & aEquipTypeStr & "%'"
    End If
    If (Len(Nz(aEquipBrandStr, vbNullString)) > 0) Then
        fStr3 = " AND [EquipBrandStr] LIKE '%" & aEquipBrandStr & "%'"
    End If
    If (Len(Nz(aChemicalTypeStr, vbNullString)) > 0) Then
        fStr4 = " AND [ChemicalTypeStr] LIKE '%" & aChemicalTypeStr & "%'"
    End If
    
    If aStationTypeID > 0 Then
        ' Split the list into: 1=Equipment or 2=Lights
        fStr5 = " AND [StationTypeID] = " & CStr(aStationTypeID)
    End If
    
    aFilterStr = fStr1 & fStr2 & fStr3 & fStr4 & fStr5
       
    If (Len(Nz(aFilterStr, vbNullString)) = 0) Then
        lblSearchStatus.Caption = "Enter a search string."
        lblSearchStatus.Visible = True
        SetSF_FilterOff
        Exit Sub
    End If
    
    If Left(aFilterStr, 4) = " AND" Then
        aFilterStr = Mid(aFilterStr, 5, Len(aFilterStr))
    End If
        
    Me.Form(SubFrm).Form.Filter = aFilterStr
    
    
    If Me.Form(SubFrm).Form.FilterOn = False Then
        Me.Form(SubFrm).Form.FilterOn = True
    End If
    
    ' no errors ... assert visibility
    lblSearchStatus.Visible = False
    
PROC_EXIT:

    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " ParamChanged" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
    
End Sub


Private Sub DynamicResize()
    'Me. was replaced with aForm.
    ''If Not mPassed Then Exit Sub

    'Variables
    Dim lngCount As Long
    Dim lngWindowHeight As Long
    Dim lngOldWindowHeight As Long
    Dim lngDeltaTop As Long
    Dim lngMaxRecordsToShow As Long
    Dim lngMinRecordsToShow As Long
    Dim SF_DetailedHeight As Long
    
    Dim sql As String
    Dim rs As DAO.Recordset
    Dim db As DAO.Database

    lngMaxRecordsToShow = 20
    lngMinRecordsToShow = 15

    'Find the amount of records in form
        Set db = CurrentDb
        sql = "Select * FROM " & MainTable
        ' BSA correct method to use DAO to connect to MSSQL
        Set rs = db.OpenRecordset(sql, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    
    
    If Not rs.EOF Then rs.MoveLast
    lngCount = rs.RecordCount
    
    'Cleanup
        Set rs = Nothing
        Set db = Nothing
        

    'Assert Minimum height
    If lngCount <= lngMinRecordsToShow Then lngCount = lngMinRecordsToShow

    'Check whether there are more then Max amount of records
    If lngCount > lngMaxRecordsToShow Then
        lngCount = lngMaxRecordsToShow
        'Enable vertical scrollbar
        Me.ScrollBars = 2                     'Vertical
    Else
        'Disable scrollbars
        Me.ScrollBars = 0                     'None
    End If

    'Calculate new windowheight.
    'If you do not have a header/footer, or they are not visible adjust accordingly
    
    SF_DetailedHeight = Me.Form(SubFrm).Form.Detail.Height
                      '(Me.Detail.Height * lngCount) + _

    lngWindowHeight = Me.FormHeader.Height + _
                      (SF_DetailedHeight * lngCount) + _
                      Me.FormFooter.Height + _
                      567
    'The 567 is to account for title bar Height.
    'If you use thin border, adjust accordingly

    'The form will be "shortened" and we need to adjust the top property as well to keep it properly centered
    lngOldWindowHeight = Me.WindowHeight
    lngDeltaTop = (lngOldWindowHeight - lngWindowHeight) / 2

    'Use the move function to move the form

    Me.Move Me.WindowLeft, Me.WindowTop + lngDeltaTop, , lngWindowHeight

End Sub




