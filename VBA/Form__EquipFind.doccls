Option Compare Database
Option Explicit

Const MainFrm As String = "_Equipment"
Const SubFrm As String = "SF_EquipFind"

Const PKey As String = "[EquipmentID]"
Const SearchFld As String = "[ShortCaption]"

Const ModuleName As String = "EquipFind"


Private Sub cbxChemicalType_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cbxEquipBrand_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cmdClearBrand_Click()
    Me.cbxEquipBrand = vbNullString
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cmdClearChemicalType_Click()
    Me.cbxChemicalType = vbNullString
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cmdClearType_Click()
    Me.cbxEquipType = vbNullString
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub cbxEquipType_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub Form_Load()
    lblSearchStatus.Visible = False
    Me.cbxEquipType = vbNullString
    Me.cbxChemicalType = vbNullString
    Me.cbxEquipBrand = vbNullString
    'DynamicResize
End Sub

Private Sub Form_Open(Cancel As Integer)
    txtTextBox = vbNullString
    If Me.txtTextBox.Visible Then Me.txtTextBox.SetFocus
    SetSF_FilterOff
End Sub

Private Sub Form_Activate()
    If Me.txtTextBox.Visible Then Me.txtTextBox.SetFocus
End Sub

Public Sub Child_Called_DlbClick(Cancel As Integer)
    Form_DblClick Cancel
End Sub

Private Sub Form_DblClick(Cancel As Integer)
    cmdGOTO_Click
End Sub

Private Sub cmdClear_Click()
    Me.txtTextBox = vbNullString
    If Me.txtTextBox.Visible Then Me.txtTextBox.SetFocus
    ParamChanged
End Sub

Private Sub cmdGOTO_Click()
Dim strCriteria As String
Dim rst As DAO.Recordset
Dim v As Variant

Dim msg As String
On Error GoTo PROC_ERR
    
    v = Me.Form(SubFrm).Form.Controls(PKey)
    If (Nz(v, 0) > 0) Then
        If Not IsLoaded(MainFrm) Then
            DoCmd.OpenForm MainFrm, acNormal
        End If
        Forms(MainFrm).FilterOn = False
        Set rst = Forms(MainFrm).RecordsetClone
        strCriteria = PKey & " = " & CStr(v)
        rst.FindFirst strCriteria
        If Not rst.NoMatch Then
            Forms(MainFrm).Bookmark = rst.Bookmark
            Forms(MainFrm).SetFocus
            Exit Sub
        Else
            MsgBox "NoMatch :: Unable to bookmark ID.", , "Error finding booking..."
        End If
        Set rst = Nothing
    Else
        Beep
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " cmdGOTO_Click Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Sub
    


Private Sub txtTextBox_Change()
    ParamChanged
    Me.Form(SubFrm).Form.CountRecords
End Sub

Private Sub SetSF_FilterOff()
    If Me.Form(SubFrm).Form.FilterOn Then
        Me.Form(SubFrm).Form.FilterOn = False
    End If
End Sub

Private Sub ParamChanged()

    ' variant - resolves NULL exceptions
    Dim aSearchStr As Variant
    Dim aEquipTypeStr As Variant
    Dim aEquipBrandStr As Variant
    Dim aChemicalTypeStr As Variant
    
    Dim msg As String
    Dim aFilterStr As String
    Dim fStr1 As String
    Dim fStr2 As String
    Dim fStr3 As String
    Dim fStr4 As String
    
    On Error GoTo PROC_ERR
    
    
    aFilterStr = vbNullString
    fStr1 = vbNullString
    fStr2 = vbNullString
    fStr3 = vbNullString
    fStr4 = vbNullString
        
    If (Me.txtTextBox Is Me.ActiveControl) Then
        aSearchStr = Me.txtTextBox.Text
    Else
        aSearchStr = Me.txtTextBox.value
    End If
    
    If (Me.cbxEquipType Is Me.ActiveControl) Then
        aEquipTypeStr = Me.cbxEquipType.Text
    Else
        aEquipTypeStr = Me.cbxEquipType.value
    End If
    If (Me.cbxEquipBrand Is Me.ActiveControl) Then
        aEquipBrandStr = Me.cbxEquipBrand.Text
    Else
        aEquipBrandStr = Me.cbxEquipBrand.value
    End If
    If (Me.cbxChemicalType Is Me.ActiveControl) Then
        aChemicalTypeStr = Me.cbxChemicalType.Text
    Else
        aChemicalTypeStr = Me.cbxChemicalType.value
    End If
    
    If (Len(Nz(aSearchStr, vbNullString)) > 0) Then
        fStr1 = SearchFld & " LIKE '%" & aSearchStr & "%'"
    End If
    If (Len(Nz(aEquipTypeStr, vbNullString)) > 0) Then
        fStr2 = " AND [EquipTypeStr] LIKE '%" & aEquipTypeStr & "%'"
    End If
    If (Len(Nz(aEquipBrandStr, vbNullString)) > 0) Then
        fStr3 = " AND [EquipBrandStr] LIKE '%" & aEquipBrandStr & "%'"
    End If
    If (Len(Nz(aChemicalTypeStr, vbNullString)) > 0) Then
        fStr4 = " AND [ChemicalTypeStr] LIKE '%" & aChemicalTypeStr & "%'"
    End If
    
    aFilterStr = fStr1 & fStr2 & fStr3 & fStr4
       
    If (Len(Nz(aFilterStr, vbNullString)) = 0) Then
        lblSearchStatus.Caption = "Enter a search string."
        lblSearchStatus.Visible = True
        SetSF_FilterOff
        Exit Sub
    End If
    
    If Left(aFilterStr, 4) = " AND" Then
        aFilterStr = Mid(aFilterStr, 5, Len(aFilterStr))
    End If
        
    Me.Form(SubFrm).Form.Filter = aFilterStr
    
    If Me.Form(SubFrm).Form.FilterOn = False Then
        Me.Form(SubFrm).Form.FilterOn = True
    End If
    
    ' no errors ... assert visibility
    lblSearchStatus.Visible = False
    
PROC_EXIT:

    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = "mdlHRFind ParamChanged" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
    
End Sub







