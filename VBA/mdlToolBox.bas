Attribute VB_Name = "mdlToolBox"
Option Compare Database
Option Explicit
Const ModuleName As String = "mdlToolBox"

Public Function MilitaryTime(aTime As Variant) As String
    Dim dtmMilitary As String
    dtmMilitary = vbNullString
    If Nz(aTime, 0) > 0 Then
        If Hour(aTime) < 10 Then
            dtmMilitary = "0" & Format(aTime, "hhnn")
        Else
            dtmMilitary = Format(aTime, "hhnn")
        End If
    End If
End Function




'Private Property Get HasParent(ByRef f As Form) As Boolean
'    HasParent = False
'    On Error GoTo handler
'    HasParent = TypeName(f.Parent.Name) = "String"
'    Exit Property
'handler:
'End Property

Public Function IsLoaded(ByVal strFormName As String) As Boolean
    ' Returns True if the specified form is open in Form view or Datasheet view.
    Dim oAccessObject As AccessObject
    
    On Error GoTo err_Exit

    Set oAccessObject = CurrentProject.AllForms(strFormName)
    If oAccessObject.IsLoaded Then
        If oAccessObject.CurrentView <> acCurViewDesign Then
            IsLoaded = True
        End If
    End If
    
err_Proc:
    On Error Resume Next
    Exit Function
    
err_Exit:
    IsLoaded = False
    GoTo err_Proc
    
End Function

Public Function CleanContactNum(aContactNum As String) As String
Dim rtnNumber As String
Dim msg As String

    On Error GoTo PROC_EXIT
    
    'cleanup the phone number
    CleanContactNum = aContactNum
    rtnNumber = mdlToolBox.NumericOnly(aContactNum)
    If Len(rtnNumber) > 10 Then
        rtnNumber = Format(rtnNumber, "(+#) 00 0000 0000")
    ElseIf Len(rtnNumber) > 8 Then
        rtnNumber = Format(rtnNumber, "00 0000 0000")
    Else
        rtnNumber = Format(rtnNumber, "0000 0000")
    End If
    CleanContactNum = rtnNumber
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = ModuleName & " CleanContactNum" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    
    Resume PROC_EXIT
    
End Function

Public Sub RequeryFormAndKeepCurrSelectedRecord(f As Form)
    Dim Position As Long
    Position = f.CurrentRecord
    f.Requery
    If Position > 1 Then
        f.Recordset.Move Position - 1
    End If
End Sub

Function AlphaNumericOnly(strSource As String) As String
    Dim i As Integer
    Dim strResult As String

    For i = 1 To Len(strSource)
        Select Case Asc(Mid(strSource, i, 1))
        Case 48 To 57, 65 To 90, 97 To 122:      'include 32 if you want to include space
            strResult = strResult & Mid(strSource, i, 1)
        End Select
    Next
    AlphaNumericOnly = strResult
End Function

'
' Skips all characters in the input string except digits
'
Function NumericOnly(ByVal s As String) As String
    Dim char As String
    Dim i As Integer
    NumericOnly = vbNullString
    For i = 1 To Len(s)
        char = Mid(s, i, 1)
        If char >= "0" And char <= "9" Then
            NumericOnly = NumericOnly + char
        End If
    Next i
End Function

Public Sub Form_DynamicResize(aForm As Form)
    'Me. was replaced with aForm.
    ''If Not mPassed Then Exit Sub

    'Variables
    Dim lngCount As Long
    Dim lngWindowHeight As Long
    Dim lngOldWindowHeight As Long
    Dim lngDeltaTop As Long
    Dim lngMaxRecordsToShow As Long
    Dim lngMinRecordsToShow As Long

    lngMaxRecordsToShow = 20
    lngMinRecordsToShow = 15

    'Find the amount of records in form
    Dim rs As DAO.Recordset
    Set rs = aForm.RecordsetClone
    If Not rs.EOF Then rs.MoveLast
    lngCount = rs.RecordCount

    'Assert Minimum height
    If lngCount <= lngMinRecordsToShow Then lngCount = lngMinRecordsToShow

    'Check whether there are more then Max amount of records
    If lngCount > lngMaxRecordsToShow Then
        lngCount = lngMaxRecordsToShow
        'Enable vertical scrollbar
        aForm.ScrollBars = 2                     'Vertical
    Else
        'Disable scrollbars
        aForm.ScrollBars = 0                     'None
    End If

    'Calculate new windowheight.
    'If you do not have a header/footer, or they are not visible adjust accordingly
    lngWindowHeight = aForm.FormHeader.Height + _
                      aForm.Detail.Height * lngCount + _
                      aForm.FormFooter.Height + _
                      567
    'The 567 is to account for title bar Height.
    'If you use thin border, adjust accordingly

    'The form will be "shortened" and we need to adjust the top property as well to keep it properly centered
    lngOldWindowHeight = aForm.WindowHeight
    lngDeltaTop = (lngOldWindowHeight - lngWindowHeight) / 2

    'Use the move function to move the form

    aForm.Move aForm.WindowLeft, aForm.WindowTop + lngDeltaTop, , lngWindowHeight

    'Cleanup
    Set rs = Nothing
End Sub


