Option Compare Database
Option Explicit

Const ModuleName = "_InspectOrder"
Private CompanyCodeStr As String

Private Sub cmdClearCompletedDT_Click()
    Me.CompletedDT = vbNullString
    If Me.CompletedDT.Visible Then Me.CompletedDT.SetFocus

End Sub

Private Sub cmdClearRequestedDT_Click()
    Me.RequestedDT = vbNullString
    If Me.RequestedDT.Visible Then Me.RequestedDT.SetFocus
End Sub

Private Sub cmdCompletedDT_Click()
Dim v As Variant
    v = mdlDateTime.InputDate("Enter a date for 'Completion on'.", Me.CompletedDT)
    If Nz(v, 0) <> 0 Then
        Me.CompletedDT = v
    End If
End Sub

Private Sub cmdCustInspectReport_Click()
' open the report
Dim msg As String
Dim s As String

On Error GoTo PROC_ERR

    If Me.InspectionOrderID > 0 Then
        s = CStr(Me.InspectionOrderID)
        DoCmd.OpenReport "rptInspectOrder_Cust", acViewReport, vbNullString, , acNormal, s
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        msg = ModuleName & " cmdCustInspectReport_Click # " & str(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Private Sub cmdGotoInspectionOrder_Click()
    mdlGoto.GotoInspectionOrder
End Sub

Private Sub cmdReBuildCheckList_Click()
    ' rebuild the inspection equipment site check list
    mdlTest.ReBuildTestEquip Me.InspectionOrderID
    If mdlTest.ReturnValue = 1 Then
        Me.Form![SF_InspectOrder_Equip].Form.Requery
    End If
End Sub

Private Sub cmdReBuildCheckListLight_Click()
    ' rebuild the inspection equipment site check list
    mdlTest.ReBuildTestLight Me.InspectionOrderID
    If mdlTest.ReturnValue = 1 Then
        Me.Form![SF_InspectOrder_Light].Form.Requery
    End If
End Sub

Private Sub cmdRequestDT_Click()
Dim v As Variant
    v = mdlDateTime.InputDate("Enter a date for 'Requested on'.", Me.RequestedDT)
    If Nz(v, 0) <> 0 Then
        Me.RequestedDT = v
    End If
End Sub

Private Sub cmdTechInspectReport_Click()
    ' open the report
Dim msg As String
'Dim SQL As String
'Dim d1 As Date
'Dim d2 As Date
Dim s As String

On Error GoTo PROC_ERR

'    vReturnValue = 0
'    TOTRangeNonCore = 0
'    TOTRangeCore = 0
'
'
'    If IsNull(Me.Form![fIntervalSF]![Start]) Then
'        MsgBox "A start date is required", , "Program Attendance Report - ERROR"
'        Exit Sub
'    End If
'
'     'Filter String has dates in AMERICANIZED format
'    d1 = Format(Me.Form![fIntervalSF]![Start], "dd/mm/yyyy")
'    If Not IsNull(Me.Form![fIntervalSF]![End]) Then
'        d2 = Format(Me.Form![fIntervalSF]![End], "dd/mm/yyyy")
'    Else
'        d2 = Date
'    End If
'
'
'    d2 = mdlFunction.AdjustInterval(d2)
'
'     'clear the table
'    SQL = "DELETE * FROM t_ProgAttendance"
'    CurrentDb.Execute (SQL)
'
    If Me.InspectionOrderID > 0 Then
'        s = d1 & "|" & d2 & "|" & CStr(TOTRangeNonCore) & "|" & CStr(TOTRangeCore)
        s = CStr(Me.InspectionOrderID)
        DoCmd.OpenReport "_rpt_InspectTech", acViewReport, vbNullString, , acNormal, s
'        vReturnValue = 1
    End If
    
PROC_EXIT:
    On Error Resume Next
'    Me.Visible = False
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " CmdDisplayReport_Click # " & str(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    'vReturnValue = 0
    Resume PROC_EXIT

    

End Sub

Private Sub Form_BeforeInsert(Cancel As Integer)
    ' set the creation date for this customer
'    If Nz(Me![CreatedOn], 0) = 0 Then
'        Me![CreatedOn] = Now()
'    End If
    If IsNull(Me![CreatedOn]) Then
        Me![CreatedOn] = Now()
    End If
    
' NOT ARCHIVED?
'    If IsNull(Me![IsArchived]) Then
'        Me![IsArchived] = False
'    End If
    
End Sub

Private Sub Form_AfterUpdate()
    Dim v As Variant
    Dim DoErrMsg As Boolean
    
    DoErrMsg = False
    ' test that the level number is within the range of the current Globals setting
    ' show a warning message
    If Nz(Me![LevelNum], 0) = 0 Then
        DoErrMsg = True
    Else
        v = DLookup("NumOfLevels", "dbo_Global", "[GlobalID] = 1")
        If Nz(v, 0) <> 0 Then
            If (Me![LevelNum] > v) Then
                DoErrMsg = True
            End If
        End If
    End If
        
    If DoErrMsg = True Then
        MsgBox "The 'LevelNum' assigned to the inspection order " & Format(Me.InspectionOrderID, "0000") & " is invalid. ", _
               vbOKOnly Or vbInformation Or vbDefaultButton1, _
               "LevelNum Value Warning."
    End If
End Sub

Private Sub Form_Load()
    CompanyCodeStr = mdlCompany.GetCompanyCode()
    Me.lblCompanyCode.Caption = CompanyCodeStr
    ' assign the default filter
    Me.Filter = "[InspectionStatusID] <> 2 AND [InspectionStatusID] <> 3"
    
End Sub


Private Sub cmdNavigateFirst_Click()
    mdlNavigationCode.cmdNav_First
End Sub

Private Sub cmdNavigateLast_Click()
    mdlNavigationCode.cmdNav_Last
End Sub

Private Sub cmdNavigateNext_Click()
    mdlNavigationCode.cmdNav_Next
End Sub

Private Sub cmdNavigatePrev_Click()
    mdlNavigationCode.cmdNav_Prev
End Sub

Private Sub cmdNavigateToggleFilter_Click()
    mdlNavigationCode.cmdNav_ToggleFilter
End Sub

Private Sub cmdNavigateSearch_Click()
    mdlNavigationCode.cmdNav_SwitchToInspectOrderFindForm
End Sub

Private Sub TabCtl114_Change()
    If Me.Dirty = True Then
        Me.Dirty = False
    End If
    
End Sub

