Attribute VB_Name = "mdlHR"
Option Compare Database
Option Explicit
Const ModuleName As String = "mdlHR"

Public Function HR_Exists(ByVal aFirstName As String, ByVal aLastName As String) As Boolean
    Dim strSQL As String
    Dim db As Database
    Dim rs As Recordset
    Dim str1 As String
    Dim str2 As String
    Dim msg As String
    On Error GoTo PROC_ERR

    HR_Exists = False
    str1 = Trim(UCase(Nz(aFirstName, vbNullString)))
    str2 = Trim(UCase(Nz(aLastName, vbNullString)))
    strSQL = _
           "SELECT dbo_HR.HRID, UCase(Nz([FirstName],'')) AS s1, UCase(Nz([LastName],'')) AS s2 " & _
           "FROM dbo_HR " & _
           "WHERE (((UCase(Nz([FirstName],'')))=UCase( '" & str1 & "')) AND ((UCase(Nz([LastName],'')))=UCase('" & str2 & "')));"
    
    Set db = CurrentDb
    Set rs = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rs.RecordCount > 0 Then HR_Exists = True
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = ModuleName & " HRExists" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT

End Function

Public Function HR_ContactNumbers(aHRID As Long) As String
    ' Return the primary phone (PRIMARY) , modbile phone (Mobile), office phone (Office) , home phone (Home)

End Function

Public Function HR_Primary_EmailAddress(aHRID As Long) As String
    ' Returns the PRIMARY email address

End Function

Public Sub GotoHR(aHRID As Long)
    Dim strCriteria As String
    Dim rst As DAO.Recordset
    Dim FormNameToUseStr As String
    ' Reference re - directed
    ' Me! ... Cutomer ID hasn't been placed in the form but included in Query.
    If (aHRID > 0) Then
        FormNameToUseStr = "_HR"
        If Not IsLoaded(FormNameToUseStr) Then
            DoCmd.OpenForm FormNameToUseStr, acNormal
        End If
        Forms(FormNameToUseStr).FilterOn = False
        Set rst = Forms(FormNameToUseStr).RecordsetClone
        strCriteria = "[HRID] = " & CStr(aHRID)
        rst.FindFirst strCriteria
        If Not rst.NoMatch Then
            Forms(FormNameToUseStr).Bookmark = rst.Bookmark
            Forms(FormNameToUseStr).SetFocus
            Exit Sub
        Else
            MsgBox "NoMatch :: Unable to bookmark ID.", , "Error finding booking..."
        End If
        Set rst = Nothing
    Else
        Beep
    End If
    
End Sub

Public Function AddHRZone(ByVal aHRID As Variant) As Boolean
    Dim aPostCodeID As Long
    AddHRZone = False
    If (Nz(aHRID, 0) > 0) Then
        ' select the Zone
        aPostCodeID = mdlPicker.PickSuburb
        If (aPostCodeID > 0) Then
            ' do we already have this zone
            If (HRZone_Exists(aHRID, aPostCodeID) = False) Then
                ' create the zone linked record
                AddHRZone = AddZone(aHRID, aPostCodeID)
            Else
                Beep
            End If
        End If
    End If
End Function

Private Function AddZone(ByVal aHRID As Long, ByVal aPostCodeID As Long) As Boolean
    Dim s As String
    Dim strSQL As String
    Dim rs As DAO.Recordset
    Dim db As DAO.Database
    Dim msg As String

    On Error GoTo PROC_ERR
    AddZone = False
    If aHRID > 0 And aPostCodeID > 0 Then
        Set db = CurrentDb
        strSQL = "Select * FROM dbo_HRZone"
        Set rs = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rs) Then
            With rs
                .AddNew
                ![HRID] = aHRID
                ![PostCodeID] = aPostCodeID
                .Update
                .Bookmark = .LastModified
                'mHRZoneID = ![HRZoneID]
            End With
            AddZone = True
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rs = Nothing
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = ModuleName & "AddZone" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT
End Function

Public Function HRZone_Exists(ByVal aHRID As Long, ByVal aPostCodeID As Long) As Boolean
    Dim strSQL As String
    Dim db As Database
    Dim rs As Recordset
    Dim str1 As String
    Dim str2 As String
    Dim msg As String
    On Error GoTo PROC_ERR

    HRZone_Exists = False
    strSQL = _
           "SELECT dbo_HRZone.PostcodeID" & _
           " FROM dbo_HRZone " & _
           " WHERE HRID = " & CStr(aHRID) & " AND PostcodeID = " & CStr(aPostCodeID) & " ;"
    
    Set db = CurrentDb
    Set rs = db.OpenRecordset(strSQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If rs.RecordCount > 0 Then HRZone_Exists = True
    
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Err.Number <> 0 Then
        msg = ModuleName & " HRZone_Exists" & vbCrLf & _
              "Error # " & CStr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT

End Function


