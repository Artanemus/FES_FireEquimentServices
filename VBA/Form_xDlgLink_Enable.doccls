Option Compare Database
Option Explicit

Private CompanyCodeStr As String
Private Const ModuleName As String = "xDlgLink_Enable"
Private Const vLogCallerID  As Long = 3
Private vCompanyInfoID As Long

Private Sub cmdCancel_Click()
    mdlEnable.ReturnValue = 0
    mdlEnable.SeedDate = Empty
    mdlEnable.SeedLevel = 0
    mdlEnable.Mode = 0
    Me.Visible = False
End Sub

Private Sub cmdOK_Click()
    Dim msg As String
    Dim cCode As String
    Dim v As Variant
    Dim dateDT As Date
    Dim dateMINDT As Date
    
    On Error GoTo PROC_ERR
    
    cCode = mdlCompany.GetCompanyCode
        
    Dim Results As Integer
    ' DO A RESEED OF RequestedDT and LevelNum
    If Frame107.value = 2 Then
        'ASSERT SEED DATE
        If Nz(Me.txtSeedDate, 0) = 0 Then
            msg = "A SeedDate must be given." & vbCrLf & _
                  "(Required to Re-Seed.)."
            Results = MsgBox(msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation Or VbMsgBoxStyle.vbDefaultButton1, _
                             cCode & " Error - No seed date")
            Exit Sub
        End If
        If IsDate(Me.txtSeedDate) = False Then
            msg = "The SeedDate was a valid date." & vbCrLf & _
                  "(Required to Re-Seed.)."
            Results = MsgBox(msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation Or VbMsgBoxStyle.vbDefaultButton1, _
                             cCode & " Error - Bad seed date")
            Exit Sub
        End If
        
        dateDT = CDate(Me.txtSeedDate)
        dateMINDT = DateSerial(2020, 1, 1)
        
        If dateDT < dateMINDT Then
            msg = "The SeedDate is out of range - it must be greater than 1/1/2020." & vbCrLf & _
                  "(Required to Re-Seed.)."
            Results = MsgBox(msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation Or VbMsgBoxStyle.vbDefaultButton1, _
                             cCode & " Error - Bad seed date")
            Exit Sub
        End If
        
        If DatePart("h", Me.txtSeedDate) = 0 Then
            msg = "Please include a time for the seed date." & vbCrLf & _
                  "(Required to Re-Seed.)."
            Results = MsgBox(msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation Or VbMsgBoxStyle.vbDefaultButton1, _
                             cCode & " Error - No time given.")
            Exit Sub
        End If
    
        'ASSERT SeedLevel
        If Nz(Me.txtSeedLevel, 0) = 0 Then
            msg = "A valid seed level number must be given." & vbCrLf & _
                  "(Required to Re-Seed.)."
            Results = MsgBox(msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation Or VbMsgBoxStyle.vbDefaultButton1, _
                             cCode & " Error - No seed level")
            Exit Sub
        End If
    
        If (Me.txtSeedLevel = 0 Or Me.txtSeedDate > mdlCompany.GetGlobalDefNumOfLevels) Then
            msg = "The seed numer is zero or greater than the 'Global NumofLevels'." & vbCrLf & _
                  "(Required to Re-Seed.)."
            Results = MsgBox(msg, VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation Or VbMsgBoxStyle.vbDefaultButton1, _
                             cCode & " Error - Illegal seed level")
            Exit Sub
        End If

        mdlEnable.SeedDate = Me.txtSeedDate
        mdlEnable.SeedLevel = Me.txtSeedLevel
    
    End If
    
    mdlEnable.ReturnValue = 1
    mdlEnable.Mode = Frame107.value
    Me.Visible = False
    
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error 2101, 3270,
    If err.Number <> 0 Then
        '        msg = ModuleName & " cmdOK_Click" & vbCrLf & _
        '              "Error # " & cstr(Err.Number) & " was generated by " & Err.Source & vbCrLf & Err.Description
        '        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub cmdSetDate_Click()
    Dim v As Variant
    v = mdlDateTime.InputDate("Enter Inspection Requested for Date", Me.txtSeedDate)
    If Nz(v, 0) > 0 Then
        Me.txtSeedDate = v
        ' if the time for this inspection order hasn't been set - set it to 8AM
        If DatePart("h", Me.txtSeedDate) = 0 Then
            Me.txtSeedDate = DateAdd("h", 8, Me.txtSeedDate)
        End If
    End If
End Sub

Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        cmdCancel_Click
        KeyCode = 0
    End If
End Sub

Private Sub Form_Load()
    Dim msg As String
    
    On Error GoTo PROC_ERR
    'SnapShot
    CompanyCodeStr = mdlCompany.GetCompanyCode
    vCompanyInfoID = mdlCompany.GetCompanyInfoID
    Me.lblCompanyCode.Caption = CompanyCodeStr
    mdlEnable.ReturnValue = 0
    mdlEnable.SeedDate = Empty
    mdlEnable.SeedLevel = 0
    mdlEnable.Mode = 0
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        msg = ModuleName & " Form_Load" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
    Dim v As Variant
    Dim msg As String
    Dim s As String
    Dim lngCustSiteID As Long
    Dim cls As clsLinkData
    Dim ErrState As Integer
    Dim WarnState As Integer
    Dim aLevelNum As Integer
    Dim errMsg As String
    Dim Success As Boolean
    Dim dblServiceInterval As Double
    
    On Error GoTo PROC_ERR
    
    If Len(Me.OpenArgs) > 0 Then
        Frame107.value = 1
    
        ' ArgCount is Base zero
        ' -------------------------------------------------
        ' CUstomer Site ID (LINK)
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
        If IsNull(v) Then
            errMsg = _
                   "Missing OpenArgs (0)"
            mdlLog.AppendLog "Enable Customer Site DLG.", errMsg, vLogCallerID, 5, vCompanyInfoID
            Cancel = True
            Exit Sub
        End If
        lngCustSiteID = CLng(v)
        
        ' SERVICE INTERVAL
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 1)
        If IsNull(v) Then
            errMsg = _
                   "Missing OpenArgs (1)"
            mdlLog.AppendLog "Enable Customer Site DLG.", errMsg, vLogCallerID, 5, vCompanyInfoID
            Cancel = True
            Exit Sub
        End If
        dblServiceInterval = CDbl(v)
            
        ' filter on form to display the LINK data and site and customer details
        Me.Filter = "[CustSiteID] = " & CStr(lngCustSiteID)
        If Me.FilterOn = False Then
            Me.FilterOn = True
            Me.Requery
        End If
        
        ' PREPARE THE CLASS - LOAD WITH DATA
        Set cls = New clsLinkData
        Success = cls.PrepareData(lngCustSiteID, errMsg, dblServiceInterval)
        If Not Success Then
            mdlLog.AppendLog "Enable Customer Site DLG.", errMsg, vLogCallerID, 5, vCompanyInfoID
            DoCmd.OpenForm "xDlgLink_Enabled_Failed", , , , , acDialog, msg
            DoCmd.Close acForm, "xDlgLink_Enabled_Failed", acSaveNo
            Cancel = True
            Exit Sub
        Else
            ' -------- LAST INSPECTION ORDER ID
            Me.txtLastInpectionOrderID.Caption = CStr(cls.LastInspectionOrderID)
            
            ' -------- LAST INSPECTION STATUS
            v = DLookup("[Caption]", "dbo_InspectionStatus", "[InspectionStatusID] = " & CStr(cls.LastInspectionStatusID()))
            
            If (Nz(v, 0) > 0) Then
                Me.txtLastInspectOrderStatus.Caption = CStr(v)
            Else
                Me.txtLastInspectOrderStatus.Caption = "ERROR"
            End If
            
            ' -------- LAST REQUESTED DATETIME
            If Not IsEmpty(cls.LastRequestedDT()) Then
                Me.txtLastRequestedBy.Caption = Format(cls.LastRequestedDT, "dd/mm/yyyy  HH:nn")
            Else
                Me.txtLastRequestedBy.Caption = "ERROR"
            End If
            
            ' -------- LAST LEVEL NUMBER
            Me.txtLastLevelNum.Caption = CStr(cls.LastLevelNum())
    
        End If
        Set cls = Nothing
    End If


PROC_EXIT:
    Set cls = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = ModuleName & " Form_Open" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Cancel = True
    Resume PROC_EXIT
    
End Sub





