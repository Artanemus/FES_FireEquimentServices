Option Compare Database
'@Folder "TECH"
Option Explicit
Const ModuleName = "rpt_TechRpt"

Private mDateSeedS As Date
Private mDateSeedE As Date
Private mOrderBy As String
Private mInspectionOrderID As Long
Private mServiceInterval As Double

Public Property Let TechRpt_InspectionOrderID(ByVal RHS As Variant)
    mInspectionOrderID = RHS
End Property

Public Property Let TechRpt_ServiceInterval(ByVal RHS As Variant)
    mServiceInterval = RHS
End Property

Private Sub Report_Activate()
Dim v As Variant

    On Error GoTo PROC_ERR:

    If Me.CurrentView = 6 Then
    
        lblPOSstate.Visible = False
        lblMajorLCStateP.Visible = False
        lblMajorLCStateW.Visible = False
        
        ' TODO: Enable check state - if required?
        lblMajorLCStateE.Visible = False
        lblMajorLCStateS.Visible = False
        
        If Not Me.SiteID Is Nothing Then ' error trap
            v = [_QRT_SQLEXPRESS].GetPOSstate(Me.SiteID)
            If Nz(v, 0) = 1 Then
                lblPOSstate.Visible = True
            End If
        End If
        
        If Not Me.InspectionOrderID Is Nothing Then ' error trap
            v = [_QRT_SQLEXPRESS].GetMajorLCstate(Me.InspectionOrderID, 1) ' CoreGroup is Portable
            If Nz(v, 0) = 1 Then
                lblMajorLCStateP.Visible = True
            End If
            
            v = [_QRT_SQLEXPRESS].GetMajorLCstate(Me.InspectionOrderID, 3) ' CoreGroup is WaterBase
            If Nz(v, 0) = 1 Then
                lblMajorLCStateW.Visible = True
            End If
        End If
        
        lblCompanyName.Caption = mdlCompany.GetCompanyName()
        Me.Filter = "[InspectionOrderID] = " & CStr(mInspectionOrderID) & " AND [Serviceinterval] = " & CStr(mServiceInterval)
        If Not Me.InspectionOrderID Is Nothing Then ' error trap
            Me.FilterOn = True
        End If
    End If
    
       
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' SKIP ERROR MESSAGE ...
'    If err.Number <> 0 Then
'        msg = ModuleName & "Report_Load Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
'        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
'    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Report_Load()
Dim msg As String
Dim v As Variant

    On Error GoTo PROC_ERR:
    
    mInspectionOrderID = 0
    mServiceInterval = 6
    
    If Not IsNull(Me.OpenArgs) And Len(Me.OpenArgs > 0) Then
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
        If Nz(v, 0) > 0 Then
            mInspectionOrderID = CLng(v)
        End If

        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 1)
        If Nz(v, 0) > 0 Then
            mServiceInterval = CLng(v)
        End If
    End If
       
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        msg = ModuleName & "Report_Load Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub
