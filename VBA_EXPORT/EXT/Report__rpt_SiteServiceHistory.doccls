Option Compare Database
'@Folder "TECH"
Option Explicit

Const ModuleName = "rpt_SiteServiceHistory"

Private mDateSeedS As Date
Private mDateSeedE As Date
Private mOrderBy As String
Private mSiteID As Long
Private mServiceInterval As Double
Private mRequestedDT As Date

'Public Property Get InspectionOrderID() As Variant
'    If IsObject(mInspectionOrderID) Then
'        Set InspectionOrderID = mInspectionOrderID
'    Else
'        InspectionOrderID = mInspectionOrderID
'    End If
'End Property

Public Property Let Rpt_SiteID(ByVal RHS As Variant)
    mSiteID = RHS
End Property

Public Property Let Rpt_RequestedDT(ByVal RHS As Variant)
    mRequestedDT = RHS
End Property

'Public Property Get ServiceInterval() As Variant
'    If IsObject(mServiceInterval) Then
'        Set ServiceInterval = mServiceInterval
'    Else
'        ServiceInterval = mServiceInterval
'    End If
'End Property

Public Property Let Rpt_ServiceInterval(ByVal RHS As Variant)
    mServiceInterval = RHS
End Property

Private Sub Report_Activate()
Dim s As String
Dim dt As Date

    If Me.CurrentView = 6 Then

    ' DEBUG ----
'    mSiteID = 1029
'    mServiceInterval = 6
'    mRequestedDT = Date
    
    Me.txtMaxDate.Value = Format(mRequestedDT, "dd/mm/yyyy")

        dt = DateAdd("yyyy", -3, mRequestedDT)
        Me.Filter = _
            "[SiteID] = " & CStr(mSiteID) & " AND [Serviceinterval] = " & CStr(mServiceInterval) & _
            " AND [RequestedDT] < #" & Format(mRequestedDT, "mm/dd/yyyy") & "# " & _
            " AND [RequestedDT] >= #" & Format(dt, "mm/dd/yyyy") & "# "
        Me.FilterOn = True
        
    End If
    
    ' Filter the Sub-Report to show a 'selection' of technician's summary notes for the site.
    If Me.Report("_rpt_SiteServiceHistory_SF_Summary").Report.CurrentView = 6 Then
        Me.Report("_rpt_SiteServiceHistory_SF_Summary").Report.Filter = _
        "[RequestedDT] < #" & Format(mRequestedDT, "mm/dd/yyyy") & "# " & _
            " AND [RequestedDT] >= #" & Format(dt, "mm/dd/yyyy") & "# "
    End If

End Sub

Private Sub Report_Load()
Dim d As Date
Dim msg As String
Dim v As Variant

    On Error GoTo PROC_ERR:


    If Not IsNull(Me.OpenArgs) And Len(Me.OpenArgs > 0) Then
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
        If Nz(v, 0) > 0 Then
            mSiteID = CLng(v)
        End If

        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 1)
        If Nz(v, 0) > 0 Then
            mServiceInterval = CDbl(v)
        End If
        
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 2)
        If Nz(v, 0) > 0 Then
            mRequestedDT = CLng(v)
        End If
        
'        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
'        If Nz(v, 0) > 0 Then
'            mDateSeedS = CDate(v)
'        End If
'        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 1)
'        If Nz(v, 0) > 0 Then
'            mDateSeedE = CDate(v)
'        End If
'        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 2)
'        If Nz(v, 0) > 0 Then
'            mOrderBy = CStr(v)
'        End If

        
    Else
        ' GoTo PROC_ERR:
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        msg = ModuleName & "Report_Load Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Private Sub Report_Open(Cancel As Integer)

'    If IsNull(Me.OpenArgs) Then
'        Cancel = True
'    End If
'    If Len(Me.OpenArgs) = 0 Then
'        Cancel = True
'    End If
End Sub

