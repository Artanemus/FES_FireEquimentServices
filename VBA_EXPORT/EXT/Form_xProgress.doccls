Option Compare Database
'@Folder "PROGRESS"
Option Explicit

Const ModuleName As String = "xTemplate_Dlg"
Private CompanyCodeStr As String
Private bAbort As Boolean
Private bRunSilent As Boolean

'Private Const sngOffset As Single = 1.5    ' For Excel AND UserForms in Access
Private Const sngOffset As Single = 15      ' For Access

Private mdblMax As Double   ' max value of progress bar
Private mdblVal As Double   ' current value of progress bar
Private mdblFullWidth As Double ' width of front label at 100%
Private mdblIncSize As Double
Private mblnHideCap As Boolean  ' display percent complete
Private mobjParent As Object    ' parent of back label
Private mlblBack As MSForms.Label     ' existing label for back
Private mlblFront As MSForms.Label   ' label created for front
Private mlblCaption As MSForms.Label ' progress bar caption
Private mdteLastUpdate As Date      ' Time last updated
Private mblnNotSmooth As Boolean    ' Display smooth bar by doevents after every update.

Private vReturnValue As Variant

Public Property Get ReturnValue() As Variant
    ReturnValue = vReturnValue
End Property

Public Property Get Max() As Double
    Max = mdblMax
End Property

Public Property Let Max(ByVal RHS As Double)
    mdblMax = mdblMax
End Property

Public Property Get UserAbort() As Boolean
    UserAbort = bAbort
End Property

Public Property Get FrontWidth() As Double
    FrontWidth = mlblFront.Width
End Property


Public Property Get Value() As Double
    Value = mdblVal
End Property

Public Property Let Value(ByVal RHS As Double)
    ' trap division by zero
    If RHS = 0 Then
        mdblVal = RHS
        Update
    Else
        'update only if change is => 1%
        If (CInt(RHS * (100 / mdblMax))) > (CInt(RHS * (100 / mdblMax))) Then
            mdblVal = RHS
            Update
        Else
            mdblVal = RHS
        End If
    End If
End Property

Public Property Get IncrementSize() As Double
    IncrementSize = mdblIncSize
End Property

Public Property Let IncrementSize(ByVal RHS As Double)
    mdblIncSize = RHS
End Property

Private Sub cmdCancel_Click()
    vReturnValue = vbNull
    bAbort = True
    Me.Visible = False
End Sub

Public Property Get HideCaption() As Boolean
    HideCaption = mblnHideCap
End Property

Public Property Let HideCaption(ByVal RHS As Boolean)
    mblnHideCap = RHS
End Property

Public Property Get Smooth() As Boolean
    ' Display the progress bar smoothly.
    ' True by default, this property allows the call
    ' to doevents after every increment.
    ' If False, it will only update once per second.
    ' (This may increase speed for fast progresses.)
    '
    ' negative to set default to true
    Smooth = mblnNotSmooth
End Property

Public Property Let Smooth(ByVal IsSmooth As Boolean)
    mblnNotSmooth = Not IsSmooth
End Property

Private Sub Update()
Dim msg As String
    
    On Error GoTo PROC_ERR
    Dim intPercent As Integer
    Dim dblWidth As Double
    'On Error Resume Next
    ' BSA FIX
    ' trap division by zero
    If mdblMax = 0 Then
        intPercent = 0
        dblWidth = 0
    Else
        intPercent = mdblVal * (100 / mdblMax)
        dblWidth = mdblVal * (mdblFullWidth / mdblMax)
    End If
    mlblFront.Width = dblWidth
    mlblCaption.Caption = intPercent & "%"
    mlblFront.Parent.Repaint    ' may not be needed

    ' Use white or black, depending on progress
    If Me.Value > (Me.Max / 2) Then
        mlblCaption.ForeColor = 16777215   ' white
    Else
        mlblCaption.ForeColor = 0  ' black
    End If

    If mblnNotSmooth Then
        If mdteLastUpdate <> Now Then
            ' update every second.
            DoEvents
            mdteLastUpdate = Now
        End If
    Else
        DoEvents
    End If

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 And Not bRunSilent Then
        msg = Me.Name & " Update" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Sub

Public Sub Increment()
Dim msg As String
    On Error GoTo PROC_ERR
    Dim dblVal As Double
    dblVal = Me.Value
    If dblVal < Me.Max Then
        Me.Value = dblVal + 1
        Call Update
    End If

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 And Not bRunSilent Then
        msg = Me.Name & " Update" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Sub

Private Function ParentForm(ctlControl As Control) As String
    ' returns the name of the parent form
    Dim objParent As Object
    Set objParent = ctlControl
    Do While Not TypeOf objParent Is Form
       Set objParent = objParent.Parent
    Loop
    ' Now we should have the parent form
    ParentForm = objParent.Name

End Function

Private Sub cmdOK_Click()
Dim msg As String
    
    On Error GoTo PROC_ERR
    Me.Visible = False
    vReturnValue = vbNull
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 And Not bRunSilent Then
        msg = Me.Name & " cmdOK_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Close()
    mlblFront.Visible = False
    mlblCaption.Visible = False
End Sub

Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        cmdCancel_Click
        KeyCode = 0
    End If
End Sub

Private Sub Form_Load()
Dim msg As String
Dim objParent As Object ' could be a form or tab control
'Dim frm As UserForm
    
    On Error GoTo PROC_ERR
    
    CompanyCodeStr = mdlCompany.GetCompanyCode
    Me.lblCompanyCode.Caption = CompanyCodeStr
    bAbort = False
    bRunSilent = True
    
    mdblMax = 100
    mdblVal = 0
    mdblIncSize = 1
    mblnHideCap = False
    mblnNotSmooth = True    ' Display smooth bar by doevents after every update.
    

    Set mobjParent = BackLabel.Parent
    ' set private variables
    Set mlblBack = BackLabel
    Set mlblFront = FrontLabel
    Set mlblCaption = CaptionLabel

    ' set properties for back label
    With mlblBack
        .Visible = True
        .SpecialEffect = 2  ' sunken. Seems to lose when not visible.
    End With

    ' set properties for front label
    With mlblFront
        mdblFullWidth = mlblBack.Width - (sngOffset * 2)
        .Left = mlblBack.Left + sngOffset
        .Top = mlblBack.Top + sngOffset
        .Width = 0
        .Height = mlblBack.Height - (sngOffset * 2)
        .Caption = ""
        .BackColor = 8388608
        .BackStyle = 1
        .Visible = True
    End With

    ' set properties for caption label
    With mlblCaption
        .Left = mlblBack.Left + 2
        .Top = mlblBack.Top + 2
        .Width = mlblBack.Width - 4
        .Height = mlblBack.Height - 4
        .TextAlign = 2 'fmTextAlignCenter
        .BackStyle = 0 'fmBackStyleTransparent
        .Caption = "0%"
        .Visible = Not Me.HideCaption
        .ForeColor = 16777215   ' white
    End With
        
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 And Not bRunSilent Then
        msg = Me.Name & " Form_Load" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
'Dim v As Variant
Dim msg As String

    On Error GoTo PROC_ERR
    
'    If Len(Me.OpenArgs) > 0 Then
'        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
'    End If

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 And Not bRunSilent Then
        msg = Me.Name & " Form_Open" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

