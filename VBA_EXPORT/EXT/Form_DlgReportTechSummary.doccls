'@Folder "TECH"
Option Compare Database
Option Explicit

Const ModuleName As String = "dlgReportTechSummary"
Private CompanyCodeStr As String


Private Sub btnBrowseFolder_Click()
    Dim v As Variant
    Dim RootPath As String
    
    RootPath = mdlToolBox.GetBatchPrintRootPath()
    If Len(RootPath) >= 0 Then
        RootPath = RootPath & "TechInspectionOrders\"
        v = mdlToolBox.BrowseForFolder(RootPath)
    Else
        v = mdlToolBox.BrowseForFolder()
    End If
    If Not IsNull(v) Then
        ' check for trailing character
        If Not Right$(v, 1) = "\" Then
            RootPath = v & "\"
        End If
        txtOutputFolder.Value = CStr(v)
    End If
    
End Sub

Private Sub cmdCancel_Click()
    mdlReportTechSummary.ReturnValue = 0

    Me.Visible = False
End Sub

Private Sub cmdClearEndDate_Click()
    Me.edtEndDate = vbNullString
End Sub

Private Sub cmdClearStartDate_Click()
    Me.edtStartDate = vbNullString
End Sub

Private Sub cmdEndDate_Click()
Dim v As Variant
    v = mdlDateTime.InputDate("Enter END DATE", Me.edtStartDate)
    If Nz(v, 0) <> 0 Then
        Me.edtEndDate = v
    End If
End Sub

Private Sub cmdOK_Click()
Dim msg As String
    
    On Error GoTo PROC_ERR
    Me.Visible = False
    mdlReportTechSummary.ReturnValue = 1
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = Me.Name & " cmdOK_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub cmdQuickFind_Click()
Dim HRID As Long
Dim rst As DAO.Recordset
Dim msg As String

    On Error GoTo PROC_ERR
    
    HRID = mdlPicker.PickHR
    If HRID > 0 Then
        ' SnapShot all user changes
        If Me.Dirty Then Me.Dirty = False
        ' if value is unknown then exception error assigning rst.
        If IsNull(Me.cmbxHRID.Value) Then Me.cmbxHRID.Value = 0
        Set rst = Me.cmbxHRID.Recordset.Clone
        rst.FindFirst "[HRID] = " & str(HRID)
        If Not rst.EOF Then
            Me.cmbxHRID.Recordset.Bookmark = rst.Bookmark
            Me.cmbxHRID.SetFocus
            Me.cmbxHRID.Value = HRID
        End If
        Set rst = Nothing
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = Me.Name & " cmdQuickFind_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub
    

Private Sub cmdStartDate_Click()
Dim v As Variant
    v = mdlDateTime.InputDate("Enter START DATE", Me.edtStartDate)
    If Nz(v, 0) <> 0 Then
        Me.edtStartDate = v
    End If
End Sub

Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        cmdCancel_Click
        KeyCode = 0
    End If
End Sub

Private Sub ClearCmbxOfValues(ByRef TComboBox As ComboBox)
    While TComboBox.ListCount > 0
        TComboBox.RemoveItem (0)
    Wend
End Sub

Private Sub Form_Load()
Dim msg As String
'Dim MyArray As Variant
Dim Ctr As Integer
Dim ListOfMonth As clsMonth
Dim i As Integer
Dim RootPath As String
    
    On Error GoTo PROC_ERR
    mdlReportTech.ReturnValue = 0
    CompanyCodeStr = mdlCompany.GetCompanyCode
    Me.lblCompanyCode.Caption = CompanyCodeStr
    Me.optgDateRange.DefaultValue = 1 'default date range is 'This month'
    Me.optgDateRange.Value = 1
    Me.chkGroupedSubFolders = True
    Me.chkGroupOnTechName = True
    Me.chkUseDraftEmailMode = False
    Me.chkUsePostEmailMode = False
    Me.chkCleanOutputDirectory = False
'    Me.chkAttachServiceHistory = False
'    Me.chkBuildSummarySheet = False
    
    Set ListOfMonth = New clsMonth
    For i = 0 To ListOfMonth.Count - 1
        Me.cmbxMonths.AddItem ListOfMonth.Data(i)
    Next i
    Set ListOfMonth = Nothing
    
    ' display the default folder for output
    
    RootPath = mdlToolBox.GetBatchPrintRootPath()
    RootPath = RootPath & "TechInspectionOrders\"
    txtOutputFolder.Value = RootPath

        
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = Me.Name & " Form_Load" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
'Dim v As Variant
Dim msg As String

    On Error GoTo PROC_ERR
    
    mdlReportTechSummary.ReturnValue = 0
    
'    If Len(Me.OpenArgs) > 0 Then
'        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
'    End If


PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        msg = Me.Name & " Form_Open" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub


