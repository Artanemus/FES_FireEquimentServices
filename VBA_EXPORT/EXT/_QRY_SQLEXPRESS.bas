Attribute VB_Name = "_QRY_SQLEXPRESS"
Option Compare Database
'@Folder "FUNCTIONS"
Option Explicit

Private Const ModuleName = "_QRY_SQLEXPRESS"
Private Const RunSilent = True

' ========================================================================================================
' PASS THROUGH FUNCTIONS - CALL SQLEXPRESS SCALAR FUNCTIONS
'
' ========================================================================================================

' Returns the next life cycle DateTime for the given station.
' A. Finds for last inspection order - increments datatime by interval.
' NOTE : 04/01/2022 The function no longer tests if the station's equipment passed it's inspection.
' B. Finds seeddate for station.
' If A > B then A
' NOTE: All 'station-inspections' considered (failed or passed).
' ========================================================================================================

Public Function GetNextLifeCycle(StationID As Long, Optional DoMajor As Integer = 1) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(StationID) Then
        GetNextLifeCycle = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
            
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Station").Connect ' EXTRACT CONNECTION DEFINITION STRING
        
        ' SQLEXPRESS Function.Scalar
        ' ------------------------------
        qdf.SQL = "SELECT dbo.NextLifeCycle(" & CStr(StationID) & ", " & CStr(DoMajor) & " ) AS x" ' build query calling scalar function
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass through query
        GetNextLifeCycle = rst!X                 ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetNextLifeCycle" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
    
End Function

' Returns the ID of the 'BEST' address for the customer.
' RETURN : NULL or LONG
Public Function GetCustAddressID(CustomerID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustomerID) Then
        GetCustAddressID = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Customer").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetCustAddressID(" & CStr(CustomerID) & ") AS x"
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetCustAddressID = rst!X          ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustAddressID" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the 'BEST' address for the customer.
' MultiLine (with CRLFs). Truncated to 128 characters.
' RETURN : NULL or STRING
Public Function GetCustAddrMultiLine(CustomerID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustomerID) Then
        GetCustAddrMultiLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Customer").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetCustAddrMultiLine(" & CStr(CustomerID) & ") AS x"
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetCustAddrMultiLine = rst!X          ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustAddrMultiLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the 'BEST' address for the customer.
' SingleLine (strips out CRLFs). Truncated to 96 characters.
' Option to include suburb and postcode (0 or 1)
' RETURN : NULL or STRING
Public Function GetCustAddrSingleLine(CustomerID As Long, Optional DoPostCode As Integer = 1) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustomerID) Then
        GetCustAddrSingleLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Customer").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetCustAddrSingleLine(" & CStr(CustomerID) & ", " & CStr(DoPostCode) & " ) AS x" ' build query calling scalar function
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetCustAddrSingleLine = rst!X         ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustAddrSingleLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the ID of the 'BEST' customer contact (HR).
' RETURN : NULL or LONG
Public Function GetCustContactID(CustomerID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustomerID) Then
        GetCustContactID = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Customer").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetCustContactID(" & CStr(CustomerID) & ") AS x"
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetCustContactID = rst!X          ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustContactID" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the 'BEST' number to use when contacting the customer
' RETURN : NULL or STRING
Public Function GetCustContactNum(CustomerID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustomerID) Then
        GetCustContactNum = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Customer").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetCustContactNum(" & CStr(CustomerID) & ") AS x"
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetCustContactNum = rst!X          ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustContactNum" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function


' Returns the 'BEST' email to use when contacting the customer
' RETURN : NULL or STRING
Public Function GetCustEmail(CustomerID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustomerID) Then
        GetCustEmail = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Customer").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetCustEmail(" & CStr(CustomerID) & ") AS x"
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetCustEmail = rst!X          ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustEmail" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the Customer-Site's contact (HR) and phone number.
' SingleLine (strips out CRLFs). Truncated to 96 characters.
' RETURN : NULL or STRING
Public Function GetCustSiteContactSingleLine(CustSiteID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(CustSiteID) Then
        GetCustSiteContactSingleLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_CustSite").Connect
        qdf.SQL = "SELECT dbo.GetCustSiteContactSingleLine(" & CStr(CustSiteID) & ") AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetCustSiteContactSingleLine = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetCustSiteContactSingleLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the ID of the 'BEST' address used by the HR
' RETURN : NULL or STRING
Public Function GetHRAddressID(HRID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(HRID) Then
        GetHRAddressID = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_HR").Connect
        qdf.SQL = "SELECT dbo.GetHRAddressID(" & CStr(HRID) & ") AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetHRAddressID = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetHRAddressID" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

Public Function GetHRAddrMultiLine(HRID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(HRID) Then
        GetHRAddrMultiLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_HR").Connect
        qdf.SQL = "SELECT dbo.GetHRAddrMultiLine(" & CStr(HRID) & ") AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetHRAddrMultiLine = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetHRAddrMultiLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

' Returns the 'BEST' address for the HR.
' SingleLine (strips out CRLFs). Truncated to 96 characters.
' Option to include suburb and postcode (0 or 1)
' RETURN : NULL or STRING
Public Function GetHRAddrSingleLine(HRID As Long, Optional DoPostCode As Integer = 1) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(HRID) Then
        GetHRAddrSingleLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_HR").Connect
        qdf.SQL = "SELECT dbo.GetHRAddrSingleLine(" & CStr(HRID) & ", " & CStr(DoPostCode) & " ) AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetHRAddrSingleLine = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetHRAddrSingleLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

Public Function GetHRContactNum(HRID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(HRID) Then
        GetHRContactNum = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_HR").Connect
        qdf.SQL = "SELECT dbo.GetHRContactNum(" & CStr(HRID) & ") AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetHRContactNum = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetHRContactNum" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

Public Function GetHRContactSingleLine(HRID As Long, Optional DoHRContactNum As Integer = 1) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(HRID) Then
        GetHRContactSingleLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_HR").Connect
        qdf.SQL = "SELECT dbo.GetHRContactSingleLine(" & CStr(HRID) & ", " & CStr(DoHRContactNum) & " ) AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetHRContactSingleLine = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetHRContactSingleLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function
Public Function GetHREmail(HRID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(HRID) Then
        GetHREmail = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_HR").Connect
        qdf.SQL = "SELECT dbo.GetHREmail(" & CStr(HRID) & ") AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetHREmail = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetHREmail" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function



' Returns the 'PRETTY' address for Site ID.
' SingleLine (strips out CRLFs). Truncated to 96 characters.
' Option to include suburb and postcode (0 or 1)
' RETURN : NULL or STRING
Public Function GetSiteAddrSingleLine(SiteID As Long, Optional DoPostCode As Integer = 1) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(SiteID) Then
        GetSiteAddrSingleLine = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")   ' Create temporary QueryDef.
        qdf.Connect = CurrentDb.TableDefs("dbo_Site").Connect ' EXTRACT CONNECTION DEFINITION STRING
        ' CALL SQLEXPRESS Scalar value function
        ' ------------------------------
        qdf.SQL = "SELECT dbo.GetSiteAddrSingleLine(" & CStr(SiteID) & ", " & CStr(DoPostCode) & " ) AS x" ' build query calling scalar function
        qdf.ReturnsRecords = True                ' Flag - returns value
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges) ' run pass-through query
        GetSiteAddrSingleLine = rst!X         ' results
        rst.Close
        
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    ' display the system error
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetSiteAddrSingleLine" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function


Public Function GetPOSstate(SiteID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(SiteID) Then
        GetPOSstate = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_Site").Connect
        qdf.SQL = "SELECT dbo.GetPOSstate(" & CStr(SiteID) & ") AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetPOSstate = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetPOSstate" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function

Public Function GetMajorLCstate(ByVal InspectionOrderID As Long, ByVal CoreGroupID As Long) As Variant
    Dim msg As String
    On Error GoTo PROC_ERR
    If IsNull(InspectionOrderID) Then
        GetMajorLCstate = Null
    Else
        Dim qdf As DAO.QueryDef
        Dim rst As DAO.Recordset
        Set qdf = CurrentDb.CreateQueryDef("")
        qdf.Connect = CurrentDb.TableDefs("dbo_Site").Connect
        qdf.SQL = "SELECT dbo.GetMajorLCstate( " & CStr(InspectionOrderID) & ", " & CStr(CoreGroupID) & " ) AS x"
        qdf.ReturnsRecords = True
        Set rst = qdf.OpenRecordset(dbOpenSnapshot, dbSQLPassThrough + dbFailOnError + dbSeeChanges)
        GetMajorLCstate = rst!X
        rst.Close
        Set rst = Nothing
        Set qdf = Nothing
    End If
        
PROC_EXIT:
    On Error Resume Next
    Exit Function

PROC_ERR:
    If Not RunSilent Then
        If err.Number <> 0 Then
            msg = ModuleName & " GetMajorLCstate" & vbCrLf & _
                  "Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
            MsgBox msg, , "Error", err.HelpFile, err.HelpContext
        End If
    End If
    Resume PROC_EXIT
End Function





