Option Compare Database
'@Folder "TECH"
Option Explicit
Const ModuleName = "rpt_TechRptSummary"

Private mDateSeedS As Date
Private mDateSeedE As Date
Private mOrderBy As String
Private mHRID As Long
Private mReportRangeStart As String
Private mReportRangeEnd As String

Public Property Let TechRpt_InspectionOrderID(ByVal RHS As Variant)
    mHRID = RHS
End Property

Public Property Let TechRpt_ServiceInterval(ByVal RHS As Variant)
    mReportRangeStart = RHS
End Property

Private Sub Report_Activate()
Dim v As Variant

    On Error GoTo PROC_ERR:

    If Me.CurrentView = 6 Then
        Me.lblTechnicianDetails.Caption = vbNullString
        If mHRID > 0 Then
            ' name and contact number
            v = GetHRContactSingleLine(mHRID, 1)
            If Nz(v, 0) > 0 Then
                Me.lblTechnicianDetails.Caption = CStr(v) & vbCrLf
            End If
            ' address and postcode
            v = GetHRAddrMultiLine(mHRID)
            If Nz(v, 0) > 0 Then
                Me.lblTechnicianDetails.Caption = Me.lblTechnicianDetails.Caption & CStr(v)
            End If
        End If

        Me.lblReportRangeStart.Caption = mReportRangeStart
        Me.lblReportRangeEnd.Caption = mReportRangeEnd
    
        lblCompanyName.Caption = mdlCompany.GetCompanyName()
        Me.Filter = "[HRID] = " & CStr(mHRID)
        If Not Me.InspectionOrderID Is Nothing Then ' error trap
            Me.FilterOn = True
        End If
    End If
    
       
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' SKIP ERROR MESSAGE ...
'    If err.Number <> 0 Then
'        msg = ModuleName & "Report_Load Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
'        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
'    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Report_Load()
Dim msg As String
Dim v As Variant

    On Error GoTo PROC_ERR:
    
    mHRID = 0
    mReportRangeStart = vbNullString
    mReportRangeEnd = vbNullString
    
    If Not IsNull(Me.OpenArgs) And Len(Me.OpenArgs > 0) Then
        ' HR identity
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 0)
        If Nz(v, 0) > 0 Then
            mHRID = CLng(v)
        End If
        ' report range start
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 1)
        If Len(Nz(v, vbNullString)) > 0 Then
            mReportRangeStart = CStr(v)
        End If
        'report range end
        v = mdlOpenArgs.AssertParseOpenArgs(Me.OpenArgs, 2)
        If Len(Nz(v, vbNullString)) > 0 Then
            mReportRangeEnd = CStr(v)
        End If
    End If
       
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        msg = ModuleName & "Report_Load Error # " & CStr(err.Number) & " was generated by " & err.SOURCE & vbCrLf & err.Description
        MsgBox msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub
