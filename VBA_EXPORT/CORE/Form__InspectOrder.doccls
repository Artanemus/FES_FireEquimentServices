Option Compare Database
Option Explicit

Const ModuleName = "_InspectOrder"
Private CompanyCodeStr As String

Private Sub cmdClearCompletedDT_Click()
    Me.CompletedDT = vbNullString
    If Me.CompletedDT.Visible Then Me.CompletedDT.SetFocus

End Sub

Private Sub cmdClearRequestedDT_Click()
    Me.RequestedDT = vbNullString
    If Me.RequestedDT.Visible Then Me.RequestedDT.SetFocus
End Sub

Private Sub cmdCompletedDT_Click()
Dim v As Variant
    v = mdlDateTime.InputDate("Enter a date for 'Completion on'.", Me.CompletedDT)
    If Nz(v, 0) <> 0 Then
        Me.CompletedDT = v
    End If
End Sub

Private Sub cmdCustInspectReport_Click()
' open the customer's test results for the inspection
Dim Msg As String
Dim s As String
On Error GoTo PROC_ERR
    If Me.InspectionOrderID > 0 Then
        s = CStr(Me.InspectionOrderID)
        s = s & "|" & CStr(Me.ServiceInterval)
        DoCmd.OpenReport "_rpt_CustRpt", acViewReport, vbNullString, , acNormal, s
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        Msg = ModuleName & " cmdCustInspectReport_Click # " & str(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Private Sub cmdGotoCustID_Click()
    mdlGoto.GotoCust Me.CustomerID
End Sub

Private Sub cmdGotoInspectionOrder_Click()
    mdlGoto.GotoInspectionOrder
End Sub

Private Sub cmdGotoSiteID_Click()
    mdlGoto.GotoSite Me.SiteID
End Sub

Private Sub cmdReBuildCheckListALL_Click()
Dim DoRequery As Boolean
    DoRequery = False
    ' rebuild the inspection equipment site check list
    If mdlKeyBoardState.IsControlKeyDown Then
        mdlTest.ClearAll Me.InspectionOrderID
        DoRequery = True
    Else
        mdlTest.ReBuildTestALLCoreGroups Me.InspectionOrderID
        If mdlTest.ReturnValue = 1 Then
            DoRequery = True
        End If
    End If
    If DoRequery Then
        Me.Form![SF_InspectOrder_Portable].Form.Requery
        Me.Form![SF_InspectOrder_Electrical].Form.Requery
        Me.Form![SF_InspectOrder_WaterBase].Form.Requery
        Me.Form![SF_InspectOrder_Structual].Form.Requery
    End If
End Sub

Private Sub cmdReBuildCheckListPortable_Click()
    ' rebuild the inspection Portable site check list
    If mdlKeyBoardState.IsControlKeyDown Then
        mdlTest.ClearSelected Me.InspectionOrderID, 1
        Me.Form![SF_InspectOrder_Portable].Form.Requery
    Else
        mdlTest.ReBuildTestPortable Me.InspectionOrderID
        If mdlTest.ReturnValue = 1 Then
            Me.Form![SF_InspectOrder_Portable].Form.Requery
        End If
    End If
End Sub

Private Sub cmdReBuildCheckListElectrical_Click()
    ' rebuild the inspection equipment site check list
    If mdlKeyBoardState.IsControlKeyDown Then
        mdlTest.ClearSelected Me.InspectionOrderID, 2
        Me.Form![SF_InspectOrder_Electrical].Form.Requery
    Else
        mdlTest.ReBuildTestElectrical Me.InspectionOrderID
        If mdlTest.ReturnValue = 1 Then
            Me.Form![SF_InspectOrder_Electrical].Form.Requery
        End If
    End If
End Sub

Private Sub cmdReBuildCheckListWaterBase_Click()
    ' rebuild the inspection WaterBase site check list
    If mdlKeyBoardState.IsControlKeyDown Then
        mdlTest.ClearSelected Me.InspectionOrderID, 3
        Me.Form![SF_InspectOrder_WaterBase].Form.Requery
    Else
        mdlTest.ReBuildTestWaterBase Me.InspectionOrderID
        If mdlTest.ReturnValue = 1 Then
            Me.Form![SF_InspectOrder_WaterBase].Form.Requery
        End If
    End If
End Sub

Private Sub cmdReBuildCheckListStructual_Click()
    ' rebuild the inspection Structual site check list
    If mdlKeyBoardState.IsControlKeyDown Then
        mdlTest.ClearSelected Me.InspectionOrderID, 4
        Me.Form![SF_InspectOrder_Structual].Form.Requery
    Else
        mdlTest.ReBuildTestStructual Me.InspectionOrderID
        If mdlTest.ReturnValue = 1 Then
            Me.Form![SF_InspectOrder_Structual].Form.Requery
        End If
    End If
End Sub


Private Sub cmdRequestDT_Click()
Dim v As Variant
    v = mdlDateTime.InputDate("Enter a date for 'Requested on'.", Me.RequestedDT)
    If Nz(v, 0) <> 0 Then
        Me.RequestedDT = v
    End If
End Sub

Private Sub cmdTechInspectReport_Click()
    ' open the report
Dim Msg As String
'Dim SQL As String
'Dim d1 As Date
'Dim d2 As Date
Dim s As String

On Error GoTo PROC_ERR

'    vReturnValue = 0
'    TOTRangeNonCore = 0
'    TOTRangeCore = 0
'
'
'    If IsNull(Me.Form![fIntervalSF]![Start]) Then
'        MsgBox "A start date is required", , "Program Attendance Report - ERROR"
'        Exit Sub
'    End If
'
'     'Filter String has dates in AMERICANIZED format
'    d1 = Format(Me.Form![fIntervalSF]![Start], "dd/mm/yyyy")
'    If Not IsNull(Me.Form![fIntervalSF]![End]) Then
'        d2 = Format(Me.Form![fIntervalSF]![End], "dd/mm/yyyy")
'    Else
'        d2 = Date
'    End If
'
'
'    d2 = mdlFunction.AdjustInterval(d2)
'
'     'clear the table
'    SQL = "DELETE * FROM t_ProgAttendance"
'    CurrentDb.Execute (SQL)
'
    If Me.InspectionOrderID > 0 Then
'        s = d1 & "|" & d2 & "|" & CStr(TOTRangeNonCore) & "|" & CStr(TOTRangeCore)
        s = CStr(Me.InspectionOrderID)
        s = s & "|" & CStr(Me.ServiceInterval)
        DoCmd.OpenReport "_rpt_InspectTech", acViewReport, vbNullString, , acNormal, s
'        vReturnValue = 1
    End If
    
PROC_EXIT:
    On Error Resume Next
'    Me.Visible = False
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " CmdDisplayReport_Click # " & str(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    'vReturnValue = 0
    Resume PROC_EXIT

    

End Sub

Private Sub Combo25_Change()
    ' lock the form?
    Call Form_Current
End Sub

Private Sub Form_BeforeInsert(Cancel As Integer)
    ' set TIMESTAMP
    Me![CreatedOn] = Now()
End Sub

Private Sub Form_AfterUpdate()
    Dim v As Variant
    Dim DoErrMsg As Boolean
    
    DoErrMsg = False
    ' test that the level number is within the range of the current Globals setting
    ' show a warning message
    If Nz(Me![LevelNum], 0) = 0 Then
        DoErrMsg = True
    Else
        v = DLookup("DefNumOfLevels", "dbo_Global", "[GlobalID] = 1")
        If Nz(v, 0) <> 0 Then
            If (Me![LevelNum] > v) Then
                DoErrMsg = True
            End If
        End If
    End If
        
    If DoErrMsg = True Then
        MsgBox "The 'LevelNum' assigned to the inspection order " & Format(Me.InspectionOrderID, "0000") & " is invalid. ", _
               vbOKOnly Or vbInformation Or vbDefaultButton1, _
               "LevelNum Value Warning."
    End If
End Sub

Private Sub Form_Current()
    ' TEST for IsLockedStatus and LOCK the CoreGroup Grids
Dim var As Variant
Dim frm As SubForm
Dim lngRed As Long
Dim lngBlack As Long

    lngRed = RGB(255, 0, 0)
    lngBlack = RGB(0, 0, 0)
    
    var = Me.InspectionStatusID
    

    
'    Me.Form("SF_InspectOrder_Portable").Locked = False
'    Me.Form("SF_InspectOrder_Electrical").Locked = False
'    Me.Form("SF_InspectOrder_WaterBase").Locked = False
'    Me.Form("SF_InspectOrder_Structual").Locked = False
    
    If Nz(var, 0) <> 0 Then
        If (CLng(var) = 3) Or (CLng(var) = 2) Then
        
            Set frm = Me.Form("SF_InspectOrder_Portable")
            frm.Enabled = False
            frm.Properties.item("BorderWidth") = 2
            frm.Properties.item("BorderColor") = lngRed
            
            Set frm = Me.Form("SF_InspectOrder_Electrical")
            frm.Enabled = False
            frm.Properties.item("BorderWidth") = 2
            frm.Properties.item("BorderColor") = lngRed
            
            Set frm = Me.Form("SF_InspectOrder_WaterBase")
            frm.Enabled = False
            frm.Properties.item("BorderWidth") = 2
            frm.Properties.item("BorderColor") = lngRed
            
            Set frm = Me.Form("SF_InspectOrder_Structual")
            frm.Enabled = False
            frm.Properties.item("BorderWidth") = 2
            frm.Properties.item("BorderColor") = lngRed
            
            'Set frm = Nothing
            
            Me.lblLocked.Visible = True
        Else
            Set frm = Me.Form("SF_InspectOrder_Portable")
            frm.Enabled = True
            frm.Properties.item("BorderWidth") = 0  ' Hairline
            frm.Properties.item("BorderColor") = lngBlack
            
            Set frm = Me.Form("SF_InspectOrder_Electrical")
            frm.Enabled = True
            frm.Properties.item("BorderWidth") = 0  ' Hairline
            frm.Properties.item("BorderColor") = lngBlack
            
            Set frm = Me.Form("SF_InspectOrder_WaterBase")
            frm.Enabled = True
            frm.Properties.item("BorderWidth") = 0  ' Hairline
            frm.Properties.item("BorderColor") = lngBlack
            
            Set frm = Me.Form("SF_InspectOrder_Structual")
            frm.Enabled = True
            frm.Properties.item("BorderWidth") = 0  ' Hairline
            frm.Properties.item("BorderColor") = lngBlack
            
            'Set frm = Nothing
            
            Me.lblLocked.Visible = False
        End If
    End If
    
    ' GotoID might enter here - tidy up LifeCycle display
    TabCtl114_Change
    
End Sub

Private Sub Form_Load()
    CompanyCodeStr = mdlCompany.GetCompanyCode()
    Me.lblCompanyCode.Caption = CompanyCodeStr
    ' assign the default filter
    ' Me.Filter = "[InspectionStatusID] <> 2 AND [InspectionStatusID] <> 3"
    
End Sub


Private Sub cmdNavigateFirst_Click()
    mdlNavigationCode.cmdNav_First
End Sub

Private Sub cmdNavigateLast_Click()
    mdlNavigationCode.cmdNav_Last
End Sub

Private Sub cmdNavigateNext_Click()
    mdlNavigationCode.cmdNav_Next
End Sub

Private Sub cmdNavigatePrev_Click()
    mdlNavigationCode.cmdNav_Prev
End Sub

Private Sub cmdNavigateToggleFilter_Click()
    mdlNavigationCode.cmdNav_ToggleFilter
End Sub

Private Sub cmdNavigateSearch_Click()
    mdlNavigationCode.cmdNav_SwitchToInspectOrderFindForm
End Sub

Private Sub TabCtl114_Change()
Dim cntrl As Control
    If Me.Dirty = True Then
        Me.Dirty = False
    End If
    
    Select Case Me.TabCtl114.Value
    Case 0, 1, Is > 5
        Me.Form("SF_InspectOrder_LC_Info").Visible = False
    Case 2 ' portable
        If Me.Form("SF_InspectOrder_Portable").Form.RecordsetClone.RecordCount = 0 Then
            Me.Form("SF_InspectOrder_LC_Info").Visible = False
        Else
            Me.Form("SF_InspectOrder_LC_Info").Visible = True
        End If
        If Me.Form("SF_InspectOrder_LC_Info").Visible = True Then
            Me.CurrTestID = Me.Form("SF_InspectOrder_Portable").Form![TestID]
            Me.Form("SF_InspectOrder_LC_Info").Form![StationNum].Format = "\P0000"
            Me.Form("SF_InspectOrder_LC_Info").Form.Refresh
        End If
    Case 4  ' waterbase
        If Me.Form("SF_InspectOrder_WaterBase").Form.RecordsetClone.RecordCount = 0 Then
            Me.Form("SF_InspectOrder_LC_Info").Visible = False
        Else
            Me.Form("SF_InspectOrder_LC_Info").Visible = True
        End If
        If Me.Form("SF_InspectOrder_LC_Info").Visible = True Then
            Me.CurrTestID = Me.Form("SF_InspectOrder_WaterBase").Form![TestID]
            Me.Form("SF_InspectOrder_LC_Info").Form![StationNum].Format = "\W0000"
            Me.Form("SF_InspectOrder_LC_Info").Form.Refresh
        End If
    Case Else
        Me.Form("SF_InspectOrder_LC_Info").Visible = False
    End Select
    
End Sub

