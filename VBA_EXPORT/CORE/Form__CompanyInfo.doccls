Option Compare Database
Option Explicit

Const ModuleName As String = "_CompanyInfo"
Const PKey As String = "[CompanyInfoID]"
Private CompanyCodeStr As String



Private Sub cmdClearPostcode_Click()
    Dim lngPK As Long
    Dim intResponse As Integer
    Dim s As String
    lngPK = Me.Controls(PKey)   ' bookmark to record
    If Nz(Me.Controls(PKey), 0) <> 0 Then
        If Nz(Me.[PostCodeID], 0) <> 0 Then
            s = mdlCompany.GetCompanyCode
            intResponse = MsgBox("Do you want to clear the postcode information " & _
                                 vbCrLf & "for the current selected Customer Address", _
                                 vbYesNo Or vbQuestion Or vbDefaultButton2, _
                                 s & " - Clear Postcode Information")
           
            If intResponse = vbYes Then
                Me.[PostCodeID] = Null
                Me.Requery
        
'                mdlToolBox.RequeryFormAndKeepCurrSelectedRecord Me.Form
                '-------------------------------------------------
'                With Me.RecordsetClone
'                    .FindFirst PKey & " = " & CStr(lngPK)
'                    If Not .NoMatch Then
'                        If Me.Dirty Then
'                            Me.Dirty = False
'                        End If
'                        Me.Bookmark = .Bookmark
'                    End If
'                End With
            End If
        Else
            Beep
        End If
    End If
End Sub

Private Sub cmdGetPostalPostcode_Click()
    Dim aPostCodeID As Variant
    Dim Msg As String
    Dim aPostCodeNumber As Long
    Dim s As String
    
    aPostCodeID = Null
    
    On Error GoTo PROC_ERR
    
    ' test for NULL site address
    If Me.NewRecord Then
        'Me.SetFocus Me.Address
'        If Len(Nz(Me.Address.Value, "")) = 0 Then
'            s = mdlCompany.GetCompanyCode
'            MsgBox "An address must be given before a postcode." & vbCrLf & _
'                    "can be assigned", _
'                    vbOKOnly Or vbInformation Or vbDefaultButton1, _
'                    s & " - Missing Address."
'            GoTo PROC_EXIT
'        End If
        ' obtain the SiteID
        If Me.Dirty Then
            Me.Dirty = False
        End If
    End If
    
    If Nz(Me.Controls(PKey), 0) <> 0 Then
        If Nz(Me![PostalPostcodeID], 0) > 0 Then
            aPostCodeNumber = DLookup("[PostCode]", "dbo_Postcode", "[PostCodeID] = " & CStr(Me![PostalPostcodeID]))
            aPostCodeID = mdlPicker.PickPostcode(aPostCodeNumber)
        Else
            aPostCodeID = mdlPicker.PickPostcode()
        End If
        If (Nz(aPostCodeID, 0) <> 0) Then
            ' fill out the values in SF_Cust_Address
            Me![PostalPostcodeID] = CLng(aPostCodeID)
'            If Me.Dirty Then
'                Me.Dirty = False
'            End If
        End If
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " cmdGetPostalPostcode_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    
    Resume PROC_EXIT
End Sub

Private Sub cmdGetPostalSuburb_Click()
    Dim aPostCodeID As Variant
    Dim Msg As String
    Dim s As String
    
    aPostCodeID = Null
    
    On Error GoTo PROC_ERR
    
    ' test for NULL site address
    If Me.NewRecord Then
        'Me.SetFocus Me.Address
'        If Len(Nz(Me.Address.Value, "")) = 0 Then
'            s = mdlCompany.GetCompanyCode
'            MsgBox "An address must be given before a suburb." & vbCrLf & _
'                    "can be assigned", _
'                    vbOKOnly Or vbInformation Or vbDefaultButton1, _
'                    s & " - Missing Suburb."
'            GoTo PROC_EXIT
'        End If
        ' obtain the SiteID
        If Me.Dirty Then
            Me.Dirty = False
        End If
    End If
    
    If Nz(Me.Controls(PKey), 0) <> 0 Then
        aPostCodeID = mdlPicker.PickSuburb()
        If (Nz(aPostCodeID, 0) <> 0) Then
            ' fill out the values in SF_Cust_Address
            Me.[dbo_CompanyInfo.PostalPostcodeID] = aPostCodeID
'            If Me.Dirty Then
'                Me.Dirty = False
'            End If
        End If
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " cmdGetPostalSuburb_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    
    Resume PROC_EXIT
End Sub

Private Sub cmdGetPostcode_Click()
    Dim aPostCodeID As Variant
    Dim Msg As String
    Dim s As String
    
    aPostCodeID = Null
    
    On Error GoTo PROC_ERR
    
    ' test for NULL site address
    If Me.NewRecord Then
        'Me.SetFocus Me.Address
'        If Len(Nz(Me.Address.Value, "")) = 0 Then
'            s = mdlCompany.GetCompanyCode
'            MsgBox "An address must be given before a postcode." & vbCrLf & _
'                    "can be assigned", _
'                    vbOKOnly Or vbInformation Or vbDefaultButton1, _
'                    s & " - Missing Address."
'            GoTo PROC_EXIT
'        End If
        ' obtain the SiteID
        If Me.Dirty Then
            Me.Dirty = False
        End If
    End If
    
    If Nz(Me.Controls(PKey), 0) <> 0 Then
        aPostCodeID = mdlPicker.PickPostcode()
        If (Nz(aPostCodeID, 0) <> 0) Then
            ' fill out the values in SF_Cust_Address
            Me.[dbo_CompanyInfo.PostcodeID] = aPostCodeID
'            If Me.Dirty = True Then
'                Me.Dirty = False
'            End If
        End If
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " cmdGetPostcode_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    
    Resume PROC_EXIT
    
End Sub



Private Sub cmdGetSuburb_Click()
    Dim aPostCodeID As Variant
    Dim Msg As String
    Dim cCode As String
    
    aPostCodeID = Null
    
    On Error GoTo PROC_ERR
    
    ' test for NULL site address
    If Me.NewRecord Then
        'Me.SetFocus Me.Address
'        If Len(Nz(Me.Address.Value, "")) = 0 Then
'            cCode = mdlCompany.GetCompanyCode
'            MsgBox "An address must be given before a suburb." & vbCrLf & _
'                    "can be assigned", _
'                    vbOKOnly Or vbInformation Or vbDefaultButton1, _
'                    cCode & " - Missing Suburb."
'            GoTo PROC_EXIT
'        End If
        ' obtain the SiteID
        If Me.Dirty Then
            Me.Dirty = False
        End If
    End If
    
    If Nz(Me.Controls(PKey), 0) <> 0 Then
        aPostCodeID = mdlPicker.PickSuburb()
        If (Nz(aPostCodeID, 0) <> 0) Then
            ' fill out the values in SF_Cust_Address
            Me.[dbo_CompanyInfo.PostcodeID] = aPostCodeID
'            If Me.Dirty Then
'                Me.Dirty = False
'            End If
        End If
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " cmdGetSuburb_Click" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    
    Resume PROC_EXIT
    
End Sub

Private Sub Form_BeforeInsert(Cancel As Integer)
    ' set TIMESTAMP
    Me![CreatedOn] = Now()
End Sub

Private Sub Form_AfterUpdate()
Dim Msg As String
    On Error GoTo PROC_ERR

    'cleanup the phone number
'    If Nz(Me.OfficeNumber, 0) <> 0 Then
'        Me.OfficeNumber = mdlToolBox.CleanContactNum(Me.OfficeNumber)
'    End If
'    If Nz(Me.MobileNumber, 0) <> 0 Then
'        Me.MobileNumber = mdlToolBox.CleanContactNum(Me.MobileNumber)
'    End If

PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    If err.Number <> 0 Then
        Msg = ModuleName & " Form_AfterUpdate" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If

    Resume PROC_EXIT

End Sub

Private Sub Form_Close()
    ' Only one record in this recordset - force a change saved
    If Me.Dirty Then Me.Dirty = False
End Sub

Private Sub Form_Load()
    CompanyCodeStr = mdlCompany.GetCompanyCode()
    Me.lblCompanyCode.Caption = CompanyCodeStr
    Me.lblCompanyName.Caption = mdlCompany.GetCompanyName()
    
End Sub

Private Sub TabCtl153_Change()
Dim Msg As String
    On Error GoTo PROC_ERR

    If Me.Dirty = True Then
        Me.Dirty = False
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = ModuleName & " TabCtl153_Change" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    
    Resume PROC_EXIT
    
End Sub