Option Compare Database
Option Explicit

Private aPostCodeID As Long


Private Sub cmdGetPostcode_Click()
    Dim Msg As String
    
    On Error GoTo PROC_ERR
    ' returns long
    aPostCodeID = mdlPicker.PickPostcode()
    If (Nz(aPostCodeID, 0) > 0) Then
        ' fill out the values in SF_Cust_Address
        [CitySuburb1] = DLookup("[Suburb]", "dbo_Postcode", "[PostcodeID] = " & CStr(aPostCodeID))
        [State1] = DLookup("[State]", "dbo_Postcode", "[PostcodeID] = " & CStr(aPostCodeID))
        [Postcode1] = DLookup("[Postcode]", "dbo_Postcode", "[PostcodeID] = " & CStr(aPostCodeID))
        [Zone1] = DLookup("[Zone]", "dbo_Postcode", "[PostcodeID] = " & CStr(aPostCodeID))
    End If
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = "DlgCustAddNewContact cmdGetPostcode_Click()" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub


Private Sub Form_BeforeInsert(Cancel As Integer)
    Me![CreatedOn] = Now()
End Sub

Private Sub Form_Load()
    Dim Msg As String
    
    On Error GoTo PROC_ERR
    
    lblPhone_Primary.Caption = DLookup("[AliasHR]", "dbo_ContactNumType", "[ContactNumTypeID] = 1")
    lblPhone_Secondary.Caption = DLookup("[AliasHR]", "dbo_ContactNumType", "[ContactNumTypeID] = 2")
    lblPhone_Tertiary.Caption = DLookup("[AliasHR]", "dbo_ContactNumType", "[ContactNumTypeID] = 3")
    
    lblEmail_Primary.Caption = DLookup("[AliasHR]", "dbo_EmailType", "[EmailTypeID] = 1")
    lblEmail_Secondary.Caption = DLookup("[AliasHR]", "dbo_EmailType", "[EmailTypeID] = 2")
    
    aPostCodeID = 0
    
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = "DlgCustAddNewContact Form_Load()" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
    
End Sub

Private Sub Form_Open(Cancel As Integer)
    ' open and create a HR new record
    
    ' Usually DoCmd.OpenForm stDocName should make stDocName the active object, which would
    ' mean GoToRecord should then be applied against that form. And you indicated that's what
    ' happens with your other forms.

    'DoCmd.GoToRecord , , acNewRec
    
    ' However, since it isn't working in this case, give GoToRecord values for both the
    ' objecttype and objectname arguments:
    DoCmd.GoToRecord acDataForm, Me.Form.Name, acNewRec
    
    mdlCustContact.ReturnValue = Null
End Sub

Private Sub cmdCancel_Click()
    Me.Undo
    mdlCustContact.ReturnValue = Null
    Me.Visible = False
End Sub

Private Sub cmdOK_Click()
    Dim Msg As String
    Dim s As String
    Dim cCode As String
    Dim intResponse As Integer
    

    On Error GoTo PROC_ERR
        cCode = mdlCompany.GetCompanyCode
    If Len(Nz(Me.FirstName, vbNullString)) = 0 Or Len(Nz(Me.LastName, vbNullString)) = 0 Then
        MsgBox "The minimum requirement is a 'First' and 'Last' name.", , _
        cCode & " - Error : Contact Name Invalid"
        Exit Sub
    End If
    If mdlHR.HR_Exists(Me.FirstName, Me.LastName) Then
        s = CStr(Me.FirstName) & " " & UCase(CStr(Me.LastName))
        ' it's not unusual to have two people with the same name. Just unlikely.
        intResponse = MsgBox(s & vbCrLf & _
                             "This name already exists in the HR database!" & vbCrLf & _
                             "Do you wish to continue and use this name?", _
                             vbYesNo + vbQuestion + vbDefaultButton2, _
                             cCode & " - WARNING : Duplicate HR name.")
        If (intResponse = vbNo) Then
            Exit Sub
        End If
    End If
    

    
    ' closes record and saves firstname and lastname (initialises HRID)
    If Me.Dirty Then Me.Dirty = False
    
    ' +-------------------------------------
    ' Add the additional parent - child records
    ' wit: emails, phones, etc
    ' +-------------------------------------
    If Len(Nz([PhonePrimary], vbNullString)) > 0 Then
        s = mdlToolBox.NumericOnly(CStr([PhonePrimary]))
        If Len(s) > 0 Then
            AddPhone Me.HRID, 1, s
        End If
    End If
    
    If Len(Nz([PhoneSecondary], vbNullString)) > 0 Then
        s = mdlToolBox.NumericOnly(CStr([PhoneSecondary]))
        If Len(s) > 0 Then
            AddPhone Me.HRID, 2, s
        End If
    End If
    
    If Len(Nz([PhoneTertiary], vbNullString)) > 0 Then
        s = mdlToolBox.NumericOnly(CStr([PhoneTertiary]))
        If Len(s) > 0 Then
            AddPhone Me.HRID, 3, s
        End If
    End If
    
    If Len(Nz([EmailPrimary], vbNullString)) > 0 Then
        AddEmail Me.HRID, 1, [EmailPrimary]
    End If
    
    If Len(Nz([EmailSecondary], vbNullString)) > 0 Then
        AddEmail Me.HRID, 2, [EmailSecondary]
    End If
    
    If Len(Nz(Me![Address], vbNullString)) > 0 Then
        AddAddress Me.HRID, 1, [Address], aPostCodeID
    End If
        
    ' return HDID to caller
    mdlCustContact.ReturnValue = Me.HRID
    ' return method for caller
    Me.Visible = False
    
PROC_EXIT:
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = "DlgCustAddNewContact cmdOk_Click()" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT

End Sub

Private Sub AddPhone(aHRID As Long, aContactNumTypeID As Variant, aPhoneNumStr As String)

    Dim Msg As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim s As String

    On Error GoTo PROC_ERR
    
    s = mdlToolBox.NumericOnly(aPhoneNumStr)
    If Len(s) > 0 Then
        Set dbs = CurrentDb
        SQL = "Select * FROM dbo_HRContactNum"
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
                .AddNew
                ![HRID] = aHRID
                ![ContactNum] = s
                ![CreatedOn] = Now()
                ![ContactNumTypeID] = aContactNumTypeID
                .Update
                '.Bookmark = .LastModified
                'mHRContactNumID = ![HRContactNumID]
            End With
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = "DLG - xDlgCustAddNewContact SUB - AddPhone" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Private Sub AddEmail(aHRID As Long, aEmailTypeID As Variant, aEmailStr As String)

    Dim Msg As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim s As String

    On Error GoTo PROC_ERR
    If Len(aEmailStr) > 0 Then
        Set dbs = CurrentDb
        SQL = "Select * FROM dbo_HREmail"
        Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
        If Not IsNull(rst) Then
            With rst
                .AddNew
                ![HRID] = aHRID
                ![Email] = aEmailStr
                ![CreatedOn] = Now()
                ![EmailTypeID] = aEmailTypeID
                .Update
                '.Bookmark = .LastModified
                'mHRContactNumID = ![HRContactNumID]
            End With
        End If
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = "DLG - xDlgCustAddNewContact SUB - AddEmail" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Private Sub AddAddress(aHRID As Long, aAddressTypeID As Variant, aAddressStr As String, Optional aPostCodeID As Variant = Null)

    Dim Msg As String
    Dim SQL As String
    Dim rst As DAO.Recordset
    Dim dbs As DAO.Database
    Dim s As String

    On Error GoTo PROC_ERR
    
    Set dbs = CurrentDb
    SQL = "Select * FROM dbo_HRAddress"
    Set rst = dbs.OpenRecordset(SQL, dbOpenDynaset, dbFailOnError + dbSeeChanges)
    If Not IsNull(rst) Then
        With rst
            .AddNew
            ![HRID] = aHRID
            ![Address] = aAddressStr
            ![CreatedOn] = Now()
            ![AddressTypeID] = aAddressTypeID
            If Nz(aPostCodeID, 0) > 0 Then
                ![PostCodeID] = aPostCodeID
            End If
            .Update
            '.Bookmark = .LastModified
            'mHRContactNumID = ![HRContactNumID]
        End With
    End If
    
PROC_EXIT:
    'Cleanup
    Set rst = Nothing
    On Error Resume Next
    Exit Sub

PROC_ERR:
    ' display the system error
    If err.Number <> 0 Then
        Msg = "DLG - xDlgCustAddNewContact SUB - AddAddress" & vbCrLf & _
              "Error # " & CStr(err.Number) & " was generated by " & err.Source & vbCrLf & err.Description
        MsgBox Msg, , "Error", err.HelpFile, err.HelpContext
    End If
    Resume PROC_EXIT
End Sub

Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyEscape Then
        KeyCode = 0
        cmdCancel_Click
    End If
End Sub

